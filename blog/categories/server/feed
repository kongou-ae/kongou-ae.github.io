<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on Aimless</title>
    <link>http://aimless.jp/categories/server/</link>
    <description>Recent content in Server on Aimless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 10 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aimless.jp/categories/server/feed/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PrometheusでAmazon Linuxのメトリクスを収集する</title>
      <link>http://aimless.jp/blog/archives/2595</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2595</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2586&#34;&gt;Amazon LinuxでPrometheusを動かしてみた&lt;/a&gt;で動いたPrometheusを利用して、サーバのメトリクスを収集します。今回はPrometheusが稼働しているAmazon Linuxのメトリクスを収集します。&lt;/p&gt;

&lt;h2 id=&#34;node-exporterを稼働させる:e67d1193b4ff96687e3431437834ddb9&#34;&gt;node_exporterを稼働させる&lt;/h2&gt;

&lt;p&gt;　メトリクスを収集したいサーバでnode_exporterというバイナリを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install git hg gcc golang
git clone https://github.com/prometheus/node_exporter.git
make
./node_exporter &amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　node_exporterは、Prometheusサーバが読み取れるデータを生成し9100ポートで公開してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ec2-user@ip-10-175-10-126 ~]$  wget http://localhost:9100/metrics
[ec2-user@ip-10-175-10-126 ~]$ more metrics 
# HELP go_gc_duration_seconds A summary of the GC invocation durations.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile=&#34;0&#34;} 8.5685e-05
go_gc_duration_seconds{quantile=&#34;0.25&#34;} 0.0006615610000000001
go_gc_duration_seconds{quantile=&#34;0.5&#34;} 0.00068378
go_gc_duration_seconds{quantile=&#34;0.75&#34;} 0.000708493
go_gc_duration_seconds{quantile=&#34;1&#34;} 0.017944932
go_gc_duration_seconds_sum 0.155032352
go_gc_duration_seconds_count 205
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　なお、node_exporterはWindowsをサポートしないようです。（&lt;a href=&#34;https://github.com/prometheus/node_exporter/issues/65&#34;&gt;Windows support&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;　node_exporterと同じように、定期的に自サーバのメトリクスを取得し、ファイルに書き込み、httpで公開できる仕組みを作れば、windowsでもメトリクスを収集できる気がします。&lt;/p&gt;

&lt;h2 id=&#34;prometheusにnodeを登録する:e67d1193b4ff96687e3431437834ddb9&#34;&gt;Prometheusにnodeを登録する&lt;/h2&gt;

&lt;p&gt;　Prometheusサーバに、node_exporterが生成するデータを登録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ec2-user@ip-10-175-10-126 ~]$ cat prometheus.conf  
（中略）
job: {
  name: &#34;node&#34;
  scrape_interval: &#34;5s&#34;
  target_group: {
    target: &#34;http://localhost:9100/metrics&#34;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;prometheusでメトリクスを確認する:e67d1193b4ff96687e3431437834ddb9&#34;&gt;Prometheusでメトリクスを確認する&lt;/h2&gt;

&lt;p&gt;　Prometheusサーバを再起動すると、コンソールにNodeが追加され、メトリクスを収集している対象の一覧が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/primetheus_node_summary.png&#34; alt=&#34;primetheus_node_summary&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　対象のノードをクリックすると、CPUとメモリ、ディスクのグラフが描画されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/prometheus_node_detail.png&#34; alt=&#34;prometheus_node_detail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　Graphタブを利用することで、取得したメトリクスのグラフを描画することが可能です。データの抽出は&lt;a href=&#34;http://prometheus.io/docs/querying/basics/#querying-prometheus&#34;&gt;QUERY LANGUAGE&lt;/a&gt;を利用する必要があります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/prometheus_node_metric_graph.png&#34; alt=&#34;prometheus_node_metric_graph&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon LinuxでPrometheusを動かしてみた</title>
      <link>http://aimless.jp/blog/archives/2586</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2586</guid>
      <description>&lt;p&gt;Prometheusを試してみようと思いインストール方法を調べた結果、バイナリファイルが公開されていることがわかりました。バイナリファイルを利用すると、さくっと動いたのでメモしておきます。必要な手順は以下の通りです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tarballのダウンロードと解凍&lt;/li&gt;
&lt;li&gt;prometheus.confの作成（&lt;a href=&#34;http://prometheus.io/docs/introduction/getting_started/#configuring-prometheus-to-monitor-itself&#34;&gt;GETTING STARTEDの内容をままコピペ&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;prometheusの起動&lt;/li&gt;
&lt;li&gt;HTTPで9090ポートにアクセス&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;[ec2-user@ip-10-175-10-126 ~]$ wget https://github.com/prometheus/prometheus/releases/download/0.13.2/prometheus-0.13.2.linux-amd64.tar.gz
--2015-05-09 12:07:12--  https://github.com/prometheus/prometheus/releases/download/0.13.2/prometheus-0.13.2.linux-amd64.tar.gz
Resolving github.com (github.com)... 192.30.252.131
Connecting to github.com (github.com)|192.30.252.131|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://s3.amazonaws.com/github-cloud/releases/6838921/b318dbf0-f3e7-11e4-8be7-d3716d1f32e5.gz?response-content-disposition=attachment%3B%20filename%3Dprometheus-0.13.2.linux-amd64.tar.gz&amp;response-content-type=application/octet-stream&amp;AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&amp;Expires=1431173292&amp;Signature=J5eC%2F4n8UDnReRDLitzGezZLj88%3D [following]
--2015-05-09 12:07:13--  https://s3.amazonaws.com/github-cloud/releases/6838921/b318dbf0-f3e7-11e4-8be7-d3716d1f32e5.gz?response-content-disposition=attachment%3B%20filename%3Dprometheus-0.13.2.linux-amd64.tar.gz&amp;response-content-type=application/octet-stream&amp;AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&amp;Expires=1431173292&amp;Signature=J5eC%2F4n8UDnReRDLitzGezZLj88%3D
Resolving s3.amazonaws.com (s3.amazonaws.com)... 54.231.244.8
Connecting to s3.amazonaws.com (s3.amazonaws.com)|54.231.244.8|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 6796769 (6.5M) [application/octet-stream]
Saving to: ‘prometheus-0.13.2.linux-amd64.tar.gz’

prometheus-0.13.2.linux-am 100%[==========================================&amp;gt;]   6.48M  1.89MB/s   in 3.4s   

2015-05-09 12:07:17 (1.89 MB/s) - ‘prometheus-0.13.2.linux-amd64.tar.gz’ saved [6796769/6796769]

[ec2-user@ip-10-175-10-126 ~]$ tar xzvf prometheus-0.13.2.linux-amd64.tar.gz 
prometheus
tools/rule_checker/rule_checker
consoles/
consoles/haproxy.html
consoles/cassandra.html
consoles/haproxy-frontend.html
consoles/index.html.example
consoles/node-overview.html
consoles/federation_template_example.txt
consoles/aws_elb.html
consoles/aws_redshift-cluster.html
consoles/node-cpu.html
consoles/index.html
consoles/node-disk.html
consoles/haproxy-backends.html
consoles/aws_redshift.html
consoles/cloudwatch.html
consoles/aws_elasticache.html
consoles/haproxy-backend.html
consoles/node.html
consoles/haproxy-frontends.html
console_libraries/
console_libraries/prom.lib
console_libraries/menu.lib
[ec2-user@ip-10-175-10-126 ~]$ ls
console_libraries  consoles  prometheus  prometheus-0.13.2.linux-amd64.tar.gz  tools

[ec2-user@ip-10-175-10-126 ~]$ touch prometheus.conf                                                        
[ec2-user@ip-10-175-10-126 ~]$ vim prometheus.conf 
[ec2-user@ip-10-175-10-126 ~]$ ./prometheus 
prometheus, version 0.13.2 (branch: HEAD, revision: f4d90a1)
  build user:       fish@localhost
  build date:       20150506-12:01:47
  go version:       1.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/Prometheus_GUI.png&#34; alt=&#34;GUI&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Chatでhubotを動かす</title>
      <link>http://aimless.jp/blog/archives/2570</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2570</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://sdelements.github.io/lets-chat/&#34;&gt;Let&amp;#8217;s Chat&lt;/a&gt;でhubotを動かしてみました。&lt;/p&gt;

&lt;h2 id=&#34;let-8217-s-chatのインストール:cfa74896d771b319eb38f92c098ab1f2&#34;&gt;Let&amp;#8217;s Chatのインストール&lt;/h2&gt;

&lt;p&gt;　nodejsとpythonはインストール済みなので、mongodbのみyumでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongodb
sudo yum install mongodb-server.x86_64
sudo systemctl start mongod.service
git clone https://github.com/sdelements/lets-chat.git
cd lets-chat
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　デフォルトだと5000番でリッスンします。FQDNやポート番号を含む各種パラメータは&lt;code&gt;settings.yml&lt;/code&gt;で変更可能です。今回は、Let&amp;#8217;s Chatはデフォルト設定のままとし、前段のnginxでバーチャルホスト+80番のアクセスを受けて、Let&amp;#8217;s Chatの5000番にProxyPassしています。&lt;/p&gt;

&lt;h2 id=&#34;hubot用アカウントの作成:cfa74896d771b319eb38f92c098ab1f2&#34;&gt;hubot用アカウントの作成&lt;/h2&gt;

&lt;p&gt;　Let&amp;#8217;s Chatにhubot用のアカウントを作成します。また作成したアカウントのAuth Tokenを取得します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/SnapCrab_NoName_2015-5-2_23-16-54_No-00.png&#34; alt=&#34;Token&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;hubotのインストール:cfa74896d771b319eb38f92c098ab1f2&#34;&gt;hubotのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo  npm install -g yo generator-hubot
mkdir myhubot
cd myhubot
yo hubot
npm install hubot-lets-chat --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hubot起動スクリプトの作成:cfa74896d771b319eb38f92c098ab1f2&#34;&gt;hubot起動スクリプトの作成&lt;/h2&gt;

&lt;p&gt;　&lt;code&gt;HUBOT_LCB_TOKEN&lt;/code&gt;の項目に、Let&amp;#8217;s Chat上で取得したhubotアカウントのAuth Tokenを記載します。また&lt;code&gt;HUBOT_LCB_ROOMS&lt;/code&gt;にはhubotを常駐させたいRoomの識別子（URLに含まれる値）を入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myhubot]$ cat run_hubot.sh
export HUBOT_LCB_TOKEN=TOKEN_OF_YOUR_HUBOT_ACCOUNT
export HUBOT_LCB_ROOMS=553db2dcf62762863672ea19
bin/hubot -a lets-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hubotの起動-動作確認:cfa74896d771b319eb38f92c098ab1f2&#34;&gt;hubotの起動＋動作確認&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;myhubot]$ ./run_hubot.sh                                 
connected
[Sun May 03 2015 00:01:55 GMT+0900 (JST)] ERROR hubot-heroku-alive included, but missing HUBOT_HEROKU_KEEPALIVE_URL. `heroku config:set HUBOT_HEROKU_KEEPALIVE_URL=$(heroku apps:info -s  | grep web_url | cut -d= -f2)`
[Sun May 03 2015 00:01:55 GMT+0900 (JST)] INFO Using default redis on localhost:6379
Joined test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;code&gt;test&lt;/code&gt;というルームにhubotがログインしました。hubotを停止すると退室します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/SnapCrab_NoName_2015-5-2_23-11-30_No-00.png&#34; alt=&#34;add room&#34; /&gt;&lt;/p&gt;

&lt;p&gt;@つきでhubotに&lt;code&gt;ping&lt;/code&gt;や&lt;code&gt;date&lt;/code&gt;すると、ちゃんと答えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/05/SnapCrab_NoName_2015-5-2_23-12-0_No-00.png&#34; alt=&#34;hubot response&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 6.6にBitnami Redmineをインストールした</title>
      <link>http://aimless.jp/blog/archives/2243</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2243</guid>
      <description>

&lt;p&gt;minimalでインストールしたCentOS6.6にBitnami Redmineをインストールしました。今後のために手順をメモしておきます。&lt;/p&gt;

&lt;h1 id=&#34;bitnami-redmineのインストール:50ecf5611bfc48aacad363ff09653e25&#34;&gt;Bitnami Redmineのインストール&lt;/h1&gt;

&lt;p&gt;　インストーラをダウンロードして実行権限をつけて実行するだけ。簡単です。Bitnamiシリーズは、ドリルではなく穴が欲しい人向けですね。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/fa6314e763f9e0d7e4ff.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;プラグインのインストール:50ecf5611bfc48aacad363ff09653e25&#34;&gt;プラグインのインストール&lt;/h1&gt;

&lt;p&gt;　本体がすんなりインストールできたので、プライグイン（redmine_knowledgebase）もインストールしました。Bitnami Consoleの存在を知らなかったため、インストールディレクトリ配下の実行ファイルを直接叩いています。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/66e71e5545649dfd2dee.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;bitnami-consoleを使う:50ecf5611bfc48aacad363ff09653e25&#34;&gt;Bitnami Consoleを使う&lt;/h1&gt;

&lt;p&gt;　環境変数を設定してくれる便利なスクリプトがありました。。。インストールディレクトリは以下のuse_redmineです。実行するとインストールディレクトリ配下のソフトへのパスが通るので、上記の手順の様に実行ファイルを直接叩く必要がありません。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/3034b4d57a7b6fd2d496.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Fedora20にしたらgraphiteが動かなくなった。</title>
      <link>http://aimless.jp/blog/archives/2124</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2124</guid>
      <description>&lt;p&gt;Fedora19にyumでインストールしたgraphiteが、Fedora20にアップグレードした時から動かなくなりました。具体的な症状は、WEBでアクセスすると以下のメッセージとともにInternal Server errorになります。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/eaacb63cda337245a72c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;　モジュールがimport errorになる理由は、&lt;a href=&#34;http://stackoverflow.com/questions/19962736/django-import-error-no-module-named-django-conf-urls-defaults&#34;&gt;Django import error &amp;#8211; no module named django.conf.urls.defaults&lt;/a&gt;に記載のある通り、Django1.6からdefaultモジュールが廃止されているためのようです。確かに、Fedora19のpython-djangoは1.5.8、Fedora20のpytho-djangoは1.6.5です。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/981b1eff4ed0e291a791.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;　Fedora20のyumでインストールできるgraphite-webパッケージはこの変更に追随していないようなので、githubのコミットを元に自分でパッチを当てました。なお、作業中のvimでは以下の2点を手修正しています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;manage.pyへのパッチが失敗したので、コメントアウト&lt;/li&gt;
&lt;li&gt;ファイルのパスが本番環境と異なるので、正しいパスに置換&lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/a0651897a40c11ec0bfc.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;　パッチ適応後、Internal server errorは解消され、正常にgraphiteの管理画面が表示されるようになりました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pythonでサーバのリソースを取得する。</title>
      <link>http://aimless.jp/blog/archives/1718</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/1718</guid>
      <description>&lt;p&gt;GrowthForecastでサーバのリソース状況をグラフ化するために、リソースの使用状況を取得してGrowthForecastにPostするスクリプトをpythonで書きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/psutil/&#34; title=&#34;psutil&#34; target=&#34;_blank&#34;&gt;psutil&lt;/a&gt;マジ便利。&lt;/li&gt;
&lt;li&gt;psutil.hogehogeにおいて複数の値を含んでいる戻り値（以下のpsutil.virtual_memory()など）から、特定の項目を綺麗に取得する方法がわからない。今回は正規表現で抽出しましたが、何か違う気がする。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import psutil
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; psutil.virtual_memory()
vmem(total=2100154368, available=1049169920, percent=50.0, used=1940869120, free=159285248, active=654180352, inactive=894349312, buffers=324390912, cached=565493760)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　psutilにはネットワークやプロセスの情報も取得できるようなので、ほかにもグラフ化できそうなものがないか確認しようと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!~/.virtualenvs/py3.3/bin/python
#! -*- coding: utf-8 -*-

import psutil
import requests
import re
import socket
import math

# GrowthForecastを更新する$
def update_gf(name, category, value):

    gf_url = &#39;http://127.0.0.1:5125/api/&#39;+name+&#39;/&#39;+category+&#39;/value&#39;
    result = requests.post(gf_url, {&#39;number&#39;: value})
    print(result.content)

# 後続で利用する正規表現を事前に定義する
memory_regex = re.compile(&#39;percent=(.+?),\s&#39;)
disk_regex = re.compile(&#39;percent=(.+?)\)&#39;)
util_regex = re.compile(&#39;_util&#39;)

# ホスト名と各種情報を取得する
hostname = socket.gethostname()
dict = {
        &#39;cpu_util&#39; : psutil.cpu_percent(),
        &#39;memory_util&#39; : memory_regex.search(str(psutil.virtual_memory())).group(1),
        &#39;root_disk_util&#39; : disk_regex.search(str(psutil.disk_usage(&#39;/&#39;))).group(1),
        &#39;home_disk_util&#39; : disk_regex.search(str(psutil.disk_usage(&#39;/home&#39;))).group(1)
        }

# 辞書の中身を利用してGrowthForecastを更新する
for key,value in dict.items():
    # 小数点が表示されるパーセント物（util=使用率）は100倍してグラフのData adjustmentで1/100する
    if util_regex.search(key) is None:
        update_gf(hostname, key, int(value))
    else:
        update_gf(hostname, key, math.floor(float(value))*100)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>wordpressのURLをCLIで変更する。</title>
      <link>http://aimless.jp/blog/archives/1681</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/1681</guid>
      <description>&lt;p&gt;wordpressを別のサーバに移行中です。旧サーバから新サーバへwordpressのディレクトリを丸ごとコピーし、動作確認のため従来のURLとは異なるURLで公開したのですが、旧URLにリダイレクトされてしまいます。&lt;/p&gt;

&lt;p&gt;　ぐぐったところ、WP上で設定されているURLにリダイレクトする仕様のようなので、SQLを直接いじって直しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; update wp_options set option_value=&#39;変更したいURL&#39; where option_name=&#39;siteurl&#39;; 
Query OK, 1 row affected (0.01 sec) Rows matched: 1 Changed: 1 Warnings: 0 
&amp;gt; update wp_options set option_value=&#39;変更したいURL&#39; where option_name=&#39;home&#39;; Query OK, 1 row affected (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Fedora19でSSHのポート番号変更</title>
      <link>http://aimless.jp/blog/archives/1674</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/1674</guid>
      <description>

&lt;p&gt;何度やっても覚えられないのでメモ。&lt;/p&gt;

&lt;h3 id=&#34;firewalldの設定:cd1795d23581417e5dae6c31d12f1ab8&#34;&gt;firewalldの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# firewall-cmd --list-all 
public 
interfaces: eth0 
sources: 
services: mdns dhcpv6-client ssh 
ports: 
masquerade: no 
forward-ports: 
icmp-blocks: 
rich rules: 
# firewall-cmd --permanent --zone=public --add-port=11022/tcp 
# firewall-cmd --reload 
# firewall-cmd --list-all 
public 
interfaces: eth0 
sources: 
services: mdns dhcpv6-client ssh 
ports: 11022/tcp 
masquerade: no 
forward-ports: 
icmp-blocks: 
rich rules:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sshdの再起動:cd1795d23581417e5dae6c31d12f1ab8&#34;&gt;sshdの再起動&lt;/h3&gt;

&lt;p&gt;　Selinuxが有効だとPermission Denyされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl status sshd.service 
# systemctl restart sshd.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>