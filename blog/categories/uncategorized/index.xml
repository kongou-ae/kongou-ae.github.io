<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Aimless</title>
    <link>http://aimless.jp/categories/uncategorized/</link>
    <description>Recent content in Uncategorized on Aimless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 27 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aimless.jp/categories/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ソフトバンクショップでiPhone 6s Plusに機種変更したら、5137円/月のオプションが付いた</title>
      <link>http://aimless.jp/blog/archives/2680</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2680</guid>
      <description>

&lt;p&gt;iPhone 6s Plusに機種変更しました。画面が大きいのはいいことです。&lt;/p&gt;

&lt;p&gt;　さて、&lt;a href=&#34;http://akimotoshoji.blog.jp/archives/51481475.html&#34;&gt;iPhone6sの機種変で、ソフトバンクに3500円/月のオプション加入を迫られたwww&lt;/a&gt;を見て、「そういえば私もかなりのオプションサービスに加入したなぁ」と思ったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;加入させられたオプション一覧:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;加入させられたオプション一覧&lt;/h2&gt;

&lt;p&gt;| サービス名 | 月額料金 |備考|
|&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash;|
| あんしん保証パックプラス       |  ￥702      |機種変更前も契約。機種変更後も利用|
|基本パック|￥540|機種変更前も契約。機種変更後も利用|
|機種変更先取りプログラム|￥324||
|オススメコンテンツ|￥324|ことりっぷ、ライフレンジャー、music.jpのパック|
|とく放題（m）|￥637||
|UULA|￥504||
|アニメ放題|￥540||
|ブック放題|￥540||
|NETFLIX|￥1026||&lt;/p&gt;

&lt;p&gt;　さらに、速度維持の仕組みを「制限モード」から「快適モード」に変更されました。「快適モード」の場合、「3日で1Gバイト」の制限に引っかかった場合に、￥2500/2Gの権利が自動的に購入されます。つまり、この現代においてパケ死するモードです。&lt;/p&gt;

&lt;h2 id=&#34;対応:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;対応&lt;/h2&gt;

&lt;p&gt;　契約時に不要なオプションがつくのは儀式だと思っているので、お店の方と「今日家に帰ってすぐに全部解約してもいいんですよね？」「お店としては10月1日以降だとありがたいのですが・・・」というやり取りをしたうえで、不要なオプションは全部解約＆速度維持を制限モードに変更しました。&lt;/p&gt;

&lt;p&gt;　解約の手続きをお客様センターのオペレータさんにお願いしようと思ったのですが、オペレータさんの対応時間が20時までであり、帰宅したのが20時を過ぎていたため、MySoftbankで手続きを行いました。大変でした。&lt;/p&gt;

&lt;p&gt;　唯一、NETFLIXだけが、解約手続きをしたはずなのに、My Softbankのオプションサービス一覧に居続けています。これは、NETFLIXの契約が請求期間の最終日にキャンセルになる関係だと信じたい。&lt;/p&gt;

&lt;h2 id=&#34;感想:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;　お店の方は「いらなければ全部変更してくださいね」「（説明資料をマーキングしたうえで）これを外してくださいね」ときちんと説明してくれました。また、説明資料にはオプションサービスの解約方法がしっかり書いてありました。そのため、いらいないサービスを押し付けられたにも関わらず、お店の印象は悪くないという不思議。気持ちよく儀式を終えることができました。&lt;/p&gt;

&lt;p&gt;　「100発撃てば1発はあたる」と思ってやっているんでしょうが、この儀式、いったい誰の指示なんでしょうね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>asciidocをPDFに変換してみた（asciidoctor-pdf）</title>
      <link>http://aimless.jp/blog/archives/2641</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2641</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2506&#34;&gt;気軽にドキュメントを書く&lt;/a&gt;シリーズです。&lt;/p&gt;

&lt;p&gt;asciidocで書き、asciidoctor-pdfでさくっとPDFにするというソリューションがあるようなので試行錯誤を繰り返した結果、&lt;a href=&#34;https://gist.githubusercontent.com/kongou-ae/a3df7fb5aedf644acd72/raw/3227df201731519db0974813c1ff1f49dff19cc3/README.adoc&#34;&gt;この.adoc&lt;/a&gt;を&lt;a href=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/README.pdf&#34;&gt;このPDF&lt;/a&gt;に変換できるようになりました。&lt;/p&gt;

&lt;p&gt;使い方ではまった箇所をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;githubのREADMEに書いてある通り、gemでインストールするだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install --pre asciidoctor-pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デフォルトのテーマでpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;デフォルトのテーマでPDFに変換する&lt;/h2&gt;

&lt;p&gt;asciidoctor-pdfコマンドを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ asciidoctor-pdf basic-example.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自作テーマを利用してpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;自作テーマを利用してPDFに変換する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc&#34;&gt;Asciidoctor PDF Theming Guide&lt;/a&gt;に記載されている通り、自分なりのテーマを作ることができます。テーマを自作するにあたっては、&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/data/themes/default-theme.yml&#34;&gt;デフォルトテーマ&lt;/a&gt;の記載内容が参考になります。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://gist.github.com/kongou-ae/46291f86c53d959271a7&#34;&gt;basic-theme.yml&lt;/a&gt;を作りました。ファイルはresources/themes配下に配置されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自作テーマを利用するためには、asciidoctor-pdfコマンドの-aオプションで、pdf-stylesdirとpdf-styleを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ページ番号を振る:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ページ番号を振る&lt;/h2&gt;

&lt;p&gt;ヘッダーとフッターにページ番号を振ることができます。今回は、.adocに:pagenums:を設定した上で、テーマファイルにページ番号の具体的なスタイルを記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more README.adoc                                                                                   
= ほげほげサービス仕様書
ほげほげ株式会社 &amp;lt;doc.writer@example.jp&amp;gt;
v1.0, 2014-01-01
:toc:
:toc-title: 目次
:figure-caption: 図
:table-caption: 表
:toclevels: 2
:pagenums:
:sectnums:
:imagesdir: resources/images/


== はじめに 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はフッターの真ん中にページ番号を表示してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;footer:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [3mm,0,0,0]
  valign: top
  recto_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
  verso_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにフッターにページ番号が表示されます。今回はフッターにページ番号を付与しましたが、ヘッダーに付与することも可能です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_page_number.png&#34; alt=&#34;フッタ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ヘッダーやフッターに画像を追加する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ヘッダーやフッターに画像を追加する&lt;/h2&gt;

&lt;p&gt;ヘッダーやフッターに画像を追加することが可能です。まずは。追加したい画像をテーマと同じディレクトリに配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、以下の様に設定します。今回はrecto_content_rightに画像を表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [0,0,3mm,0]
  valign: bottom
  image_valign: 50
  recto_content:
    left: &amp;#039;{document-title}&amp;#039;
    right: image:header-img-10mm.png[width=&#34;75&#34;]
  verso_content:
    left: &amp;#039;{document-title}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヘッダの右に画像が表示されました。ただしverso_content_rightにはimageを指定していないので、右ページには画像が出ますが、左ページには画像が出ません。&lt;/p&gt;

&lt;p&gt;![ヘッダーに画像][8]&lt;/p&gt;

&lt;h2 id=&#34;フォントを指定する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;フォントを指定する&lt;/h2&gt;

&lt;p&gt;デフォルトでは以下3種類のフォントが利用可能です。これら以外のフォントを利用することも可能です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NotoSerif&lt;/li&gt;
&lt;li&gt;Mplus1mn&lt;/li&gt;
&lt;li&gt;Mplus1pMultilingual&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mplus1pMultilingual　にはboldがないので、migmix-1pを利用してみましょう。&lt;/p&gt;

&lt;p&gt;今回はresources/fonts配下にフォントを配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree                                                                                   
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |   `-- migmix-1p
    |       |-- ipag00303
    |       |   |-- IPA_Font_License_Agreement_v1.0.txt
    |       |   `-- Readme_ipag00303.txt
    |       |-- migmix-1p-bold.ttf
    |       |-- migmix-1p-regular.ttf
    |       `-- migmix-README.txt
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマファイルでmigmixを使うことを宣言します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font:
  catalog:
    migmix:
      normal: migmix-1p/migmix-1p-regular.ttf
      bold: migmix-1p/migmix-1p-bold.ttf
      italic: migmix-1p/migmix-1p-regular.ttf
      bold_italic: migmix-1p/migmix-1p-bold.ttf
  fallbacks:
    - migmix                                                                                                               
page:
  background_color: ffffff
  layout: portrait
  margin: [30mm, 30mm, 30mm, 30mm]
  size: A4
base:
  font_color: 000000
  font_family: migmix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;asciidoctor-pdfコマンドの-aオプションでpdf-fontsdirを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic -a pdf-fontsdir=/resources/fonts README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;所感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFは綺麗に描画された。&lt;/li&gt;
&lt;li&gt;描画に至るまでの準備が簡単&lt;/li&gt;
&lt;li&gt;テーマのスタイルファイルは独自形式なので、CSSでの装飾と比べると自由度は狭い。

&lt;ul&gt;
&lt;li&gt;たとえば、現在の私の力では、テーブルの横幅を縮めることができない。[width=&amp;#8221;50&amp;#8243;]で表の横幅が50%になるはずなのだが、PDFに表示される表の横幅は100%になってしまいまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必要最低限に装飾したPDFを作る分にはもってこいかも&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[8]: &lt;a href=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_header_image.png&#34;&gt;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_header_image.png&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>気軽にドキュメントを書くための試行錯誤</title>
      <link>http://aimless.jp/blog/archives/2506</link>
      <pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2506</guid>
      <description>

&lt;p&gt;これまで、Wordの使い方を覚えた方が早いのは理解しつつ、設計書や仕様書といったドキュメントを気軽に書く方法を模索してきました。&lt;/p&gt;

&lt;h2 id=&#34;これまでの取り組み:955fa4efa5135950a9b3b93648703bd0&#34;&gt;これまでの取り組み&lt;/h2&gt;

&lt;h3 id=&#34;rest-rst2pdf:955fa4efa5135950a9b3b93648703bd0&#34;&gt;reST + rst2pdf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;reSTとrst2pdfを使ってドキュメントの内容と見た目を分離。&lt;/li&gt;
&lt;li&gt;便利ツールの稼働環境をdockerでコンテナにすることで、会社のWindows上での動作を実現。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2067&#34;&gt;気軽にドキュメントを書く（Sphinx + rst2pdf + LiveReload + docker）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF作成ツールのrst2pdfの情報が少なく、見た目を拡張することに限界を感じた。&lt;/li&gt;
&lt;li&gt;reSTよりもMarkdownを使いたくなった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;markdown-pandoc:955fa4efa5135950a9b3b93648703bd0&#34;&gt;markdown + pandoc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;コンテナの利用は継続。&lt;/li&gt;
&lt;li&gt;PDF作成ツールとして、rst2pdfの代わりにpandocを利用。これによりMarkdownを利用可能に。&lt;/li&gt;
&lt;li&gt;rst2pdfでは実現できなかった見た目の拡張性をtexで頑張ることにした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kongou-ae/doc-man&#34;&gt;doc-man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandocで日本語pdfを生成するためには日本語Latexの環境を用意する必要がある。これが気軽ではない。&lt;/li&gt;
&lt;li&gt;一からtexの作法を学習するコストが高すぎる。&lt;/li&gt;
&lt;li&gt;会社のマシンがSSDになりディスク容量が激減。ローカルに執筆環境のコンテナで持つことが厳しくなってきた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-pdf印刷:955fa4efa5135950a9b3b93648703bd0&#34;&gt;Atom + PDF印刷&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;コンテナをやめる。&lt;/li&gt;
&lt;li&gt;見た目はCSSで頑張る。さようならtex。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;Atomを使って議事メモをmarkdownで書き、Markdown Previewで確認、そのままHTMLに保存してPDFとして印刷。&lt;/li&gt;
&lt;li&gt;議事メモ等の気軽な文章を気軽に作成する事には向くが、壮大な文章を気軽に書くことに不向き。&lt;/li&gt;
&lt;li&gt;表紙や目次などが含まれるちゃんとしたドキュメントの作成に向かない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;現在の取り組み:955fa4efa5135950a9b3b93648703bd0&#34;&gt;現在の取り組み&lt;/h2&gt;

&lt;p&gt;　上記の紆余曲折の結果、以下の形で試行錯誤を継続中です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;壮大な文章（設計書や仕様書）を気軽に作れる環境を目指す&lt;/li&gt;
&lt;li&gt;元ネタとなるプレーンテキストはMarkdownで書く。&lt;/li&gt;
&lt;li&gt;PDFの見た目は、CSSで頑張る。CSSで出来ない装飾はあきらめる。過剰な装飾はいらない。&lt;/li&gt;
&lt;li&gt;執筆環境をローカルのコンテナ上で動かすのをやめる。ローカルではテキストを書くだけ、管理やビルドはリモートのリポジトリに任せる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進捗

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kongou-ae/md-kumihan&#34;&gt;md-kumihan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kongou-ae/md-kumihan/master/src/test.md&#34;&gt;このMarkdown&lt;/a&gt;が、コマンド一つで[このPDF][5]になります。&lt;/li&gt;
&lt;li&gt;md-kumihanをGialabのリポジトリ上に配置し、ローカルでMarkdownを編集してPushすると、gitlab上のgit-hookやCIツールでPDFを自動ビルド、さらにリポジトリのwikiページにpdfへのリンクを作成とかもできます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ドキュメントを中心とした継続的な運用改善:955fa4efa5135950a9b3b93648703bd0&#34;&gt;ドキュメントを中心とした継続的な運用改善&lt;/h2&gt;

&lt;p&gt;　現在の会社では、運用チームのリーダとして継続的な運用の改善を生業としています。ちゃんとやれているかは、かなり疑問ですが。。&lt;/p&gt;

&lt;p&gt;　運用の仕組みはドキュメントにする必要があります。ですが、その時間は限られています。運用の仕組みは継続的に改善する必要があり、改善の結果はドキュメントに反映させる必要があります。ですが、その時間も限られています。&lt;/p&gt;

&lt;p&gt;　限られた時間の中で効率よくドキュメントを作成し、改定し続けるにはどうすればいいか。自分の中の一つの仮説が「気軽にドキュメントを書く」と「ドキュメントを中心とした運用改善」です。&lt;/p&gt;

&lt;p&gt;　時間がない中でまとまった文章を書くためには気軽である必要があります。限られた時間は文章の内容を作成することに注力し、見た目はツールにお任せする事が望ましい。これが「気軽にドキュメントを書く」という考え方です。&lt;/p&gt;

&lt;p&gt;　運用の仕組み＝ドキュメントですから、運用の問題点はドキュメントの問題、運用改善のゴールはドキュメントの改定です。運用の問題点は、随時ドキュメントのIssueとして起票し、対応方法を検討し実践していく。問題点の改善が完了したら、改善点を反映させるためのWIP Marge Requestを作り、ドキュメントの改定作業を実施する。運用改善のタスクが、対応するドキュメントのリポジトリを中心にして回っていく。これが「ドキュメントを中心とした運用改善」です。&lt;/p&gt;

&lt;p&gt;　こんな世界も悪くないんじゃないかなと考え、仮説を検証中です。「気軽にドキュメントを書く」と「ドキュメントを中心とした運用改善」を実現するためのmd-kumihanというツールはできたので、次は自分のチームで勝手に実践だ。&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;https://github.com/kongou-ae/md-kumihan/blob/master/pdf/test.pdf&#34;&gt;https://github.com/kongou-ae/md-kumihan/blob/master/pdf/test.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>出産に掛かる費用</title>
      <link>http://aimless.jp/blog/archives/1353</link>
      <pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/1353</guid>
      <description>

&lt;p&gt;子供が生まれたので、記念？に病院にかかった費用を簡単にまとめておきます。記憶があいまいな部分もありますが、今後出産を考えている人の参考になればなと。&lt;/p&gt;

&lt;h3 id=&#34;出産までの検診:a24886dad6ec2076a91d313e1924f45b&#34;&gt;出産までの検診&lt;/h3&gt;

&lt;p&gt;　母子手帳＆公費助成の受診票（詳細：&lt;a href=&#34;http://www.city.kashiwa.lg.jp/soshiki/061800/p003803.html&#34; title=&#34;妊婦一般健康診査&#34; target=&#34;_blank&#34;&gt;妊婦一般健康診査&lt;/a&gt;）をもらえるまでの診察は完全実費で￥5,000～￥10,000くらい、以降の診察はほとんど受診票が利用可能だったため、0円～数千円でした。受診表はマジで神。40週で生まれてきたので受診表はぴったり足りました。受診表がなくなった後の診察は完全実費なので、予定週に生まれてきた息子に感謝。&lt;/p&gt;

&lt;h3 id=&#34;出産:a24886dad6ec2076a91d313e1924f45b&#34;&gt;出産&lt;/h3&gt;

&lt;p&gt;　自然分娩で部屋は個室、入院中に受けた抗生物質の点滴、陣痛促進剤の点滴、栄養剤の点滴、出産後のリラクゼーションエステ？などを含め、総額は￥538,180でした。ここから出産育児一時金￥420,000が引かれ、窓口での支払いは￥118,180でした。なお、ITS独自の出産育児付加金￥90,000を事後申請したので、最終的な実費は￥28,180になる予定です。ここまで来るとほぼゼロ円ですね。ありがたいことです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>