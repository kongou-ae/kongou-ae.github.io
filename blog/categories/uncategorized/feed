<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Aimless</title>
    <link>http://aimless.jp/categories/uncategorized/</link>
    <description>Recent content in Uncategorized on Aimless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 25 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aimless.jp/categories/uncategorized/feed/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CircleCIでRedPenを動かす</title>
      <link>http://aimless.jp/blog/archives/2686</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2686</guid>
      <description>

&lt;h2 id=&#34;はじめに:fdefdb4df80f925e79defa0315e73418&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/archives/2685/&#34;&gt;RedPenにスペルチェック機能を追加する&lt;/a&gt;の続きです。CircleCI上でRedPenを動かしてみました。
&amp;gt; RedPenを利用したスペルチェックがローカル環境で動くことを確認しました。JavaScriptでチェック項目を拡張できるのがいいですね。次はスペルチェック用辞書の単語を増やした上で、CircleCI上で動作させてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;コンテナの仕込み:fdefdb4df80f925e79defa0315e73418&#34;&gt;コンテナの仕込み&lt;/h2&gt;

&lt;p&gt;CircleCIのコンテナでRedPenを動かさなければなりません。RedPenはJava 1.8が必要なのでcircle.ymの&lt;code&gt;machine&lt;/code&gt;の箇所に追加します。また、RedPenそのものをダウンロードしなければなりませんので、&lt;code&gt;dependencies&lt;/code&gt;の箇所でアーカイブのダウンロードと展開、削除を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-circle.yml&#34;&gt;machine:
  timezone: Asia/Tokyo
  java:
    version: oraclejdk8

dependencies:
  pre:
    - wget https://github.com/RedPen-cc/RedPen/releases/download/v1.4.1/RedPen-1.4.1.tar.gz
    - tar xvf RedPen-1.4.1.tar.gz
    - rm RedPen-1.4.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テストの仕込み:fdefdb4df80f925e79defa0315e73418&#34;&gt;テストの仕込み&lt;/h2&gt;

&lt;p&gt;RedPenで独自JavaScriptを利用するためには、設定ファイルとJavaScriptファイルが必要です。せっかくなので、これらもリポジトリで管理します。ブログ用リポジトリにRedPenの設定ファイルとスペルチェック用JavaScriptを配置します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;circle.yml上でテスト方法を定義する必要があるのですが、「直近の変更が.mdファイルの時だけテストを実行する」という書き方が分かりませんでした。しこで、circle.ymlでは「直近の変更が.mdファイルの時だけテストを実行する」というスクリプトを実行することにしました。&lt;/p&gt;

&lt;p&gt;今回は以下のテストスクリプトを利用します。主に2つの作業を行っています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ブログ用リポジトリからダウンロードしたRedPenの設定ファイルと独自JavaScriptを、RedPen指定のディレクトリに移動する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;で直近の変更の差分からファイル名のみ取得し、そのファイル名が.mdであればRedPenによるテストを実行するスクリプトです。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
mv RedPen/blog.xml RedPen-*/conf
mv RedPen/spellCheck.js RedPen-*/js

filename=`git diff HEAD^ HEAD --name-only`

if [[ $filename =~ .*\.md$ ]] ;then
    echo &amp;quot;start to test $filename....&amp;quot;
    RedPen-*/bin/RedPen -c RedPen-*/conf/blog.xml -f markdown $filename
else
    echo &amp;quot;$filename is not markdown. The test will not be performed.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;実行:fdefdb4df80f925e79defa0315e73418&#34;&gt;実行&lt;/h3&gt;

&lt;p&gt;さて、試してみます。書きかけのこのエントリをブログ用リポジトリにプッシュしてみます。slackから通知があるまで、艦これでもやりつつ待ちます。&lt;/p&gt;

&lt;p&gt;テストが失敗しました。RedPenによるチェックによって、以下4点のエラーが出ました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;RedPenはスペルミスの可能性があります&lt;/li&gt;
&lt;li&gt;JavaScriptはスペルミスの可能性があります&lt;/li&gt;
&lt;li&gt;The length of the sentence (116) exceeds the maximum of 100. at line&lt;/li&gt;
&lt;li&gt;Found invalid Katakana end-hypen &amp;ldquo;エントリ&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;リトライ:fdefdb4df80f925e79defa0315e73418&#34;&gt;リトライ&lt;/h2&gt;

&lt;p&gt;4項目を修正しまして再プッシュしましたが、再びエラーです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The number of paragraphs exceeds the maximum of 6. at line: 実行&lt;/li&gt;
&lt;li&gt;The length of the sentence (109) exceeds the maximum of 100. at line: &amp;mdash;title: CircleCIでRedPenを動かすauthor: kongou_aelayout: postdate: 2015-11-25url: /blog/archives/2686categories:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目のエラーを見ると、1セクションあたりのパラグラフが多いことが原因のようです。そこで、文章の構成を変更しパラグラフの数を減らします。&lt;/p&gt;

&lt;p&gt;2つ目のエラーを見ると、1センテンスあたりの文字数が100を超えていることが原因のようです。しかし、怒られた箇所はHUGOの設定箇所のため、記載方法を変更できません。仕方がないので、標準の&lt;code&gt;SentenceLength&lt;/code&gt;の変則版を自前で実装します。JavaScriptによる拡張、便利。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // HUGOの設定以外のセンテンスに対して、100文字を超えているかどうかチェック
  if (sentence.content.match(/^---title.*categories:$/)){
  } else if (sentence.content.length &amp;gt; 100){
    addError(&#39;このセンテンスは100文字を超えています&#39;, sentence);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度プッシュします。無事テストが通りました。&lt;/p&gt;

&lt;h2 id=&#34;所感:fdefdb4df80f925e79defa0315e73418&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;CircleCIを利用して、ブログに対する継続的なテストを実装することができました。やりたいことができたので満足です。ブログを書きながら、スペルチェック用の辞書を育てていこうとおもいます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RedPenにスペルチェック機能を追加する</title>
      <link>http://aimless.jp/blog/archives/2685</link>
      <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2685</guid>
      <description>

&lt;h2 id=&#34;前置き:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;前置き&lt;/h2&gt;

&lt;p&gt;もともとこのブログはWordpressで運用していました。ですが、アウトプットすることが目的であってCMSを運用することは目的ではありませんので、HUGO + Github Pagesの構成に切り替えました。&lt;/p&gt;

&lt;p&gt;切り替えに伴い、ブログ用のGithubリポジトリにMarkdownをPushすると、CircleCIがHUGOを使ってブログをビルドし、HTMLをGithub PagesにPushする、という仕組みにしました。&lt;/p&gt;

&lt;h2 id=&#34;文章をテストする:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;文章をテストする&lt;/h2&gt;

&lt;p&gt;ブログを公開するプロセスにCircleCIがいますので、ブログの文章に対してCIを行うことがでいます。何をするか考えた結果、文章をテストすることにしました。ブログ用のGithubリポジトリにPushされたMarkdownをCircleCIでテストし、誤記や文法の誤りなどがあればテスト失敗とみなしビルドを行わない。こうすることで、ブログに誤った情報を含むエントリーが乗ってしまう可能性を減らすことができます。&lt;/p&gt;

&lt;p&gt;文章をテストするツールを探してみると、&lt;a href=&#34;https://github.com/textlint/textlint&#34;&gt;textlint/textlint&lt;/a&gt;と&lt;a href=&#34;https://github.com/redpen-cc/redpen/&#34;&gt;redpen-cc/redpen&lt;/a&gt;が見つかりました。asciidocとasciidocter-pdfを利用した気軽なドキュメント作成を模索していることもありますので、今回はasciidocをサポートするRedPenを使うことにします。&lt;/p&gt;

&lt;h2 id=&#34;実践:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;実践&lt;/h2&gt;

&lt;p&gt;UTM製品であるフォーティゲートの正しいスペルは「FortiGate」です。FortigateやFroutigateではありません。ネットワークエンジニアとして、ネットワーク機器のスペルを間違えるのは恥ずかしい。そこでRedPenに、自分が指定するキーワードを利用したスペルチェック機能を実装します。&lt;/p&gt;

&lt;p&gt;RedPenはJavaScriptを利用した機能拡張をサポートしています。「&lt;a href=&#34;http://www.clear-code.com/blog/2015/8/29.html&#34;&gt;RedPenのValidatorをJavaScript で書くには&lt;/a&gt;」を参考に、JavaScriptによる機能拡張を実装します。&lt;/p&gt;

&lt;p&gt;スペルチェックについては編集距離を利用します。編集距離を求める関数は「&lt;a href=&#34;http://lostlinksearch.net/blog/2012/12/javascript%E3%81%A7%E7%B7%A8%E9%9B%86%E8%B7%9D%E9%9B%A2%EF%BC%88%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2%EF%BC%89%E3%82%92%E8%A8%88%E7%AE%97/&#34;&gt;JavaScriptで編集距離（レーベンシュタイン距離）を計算する&lt;/a&gt;
」をそのまま使わせていただきます。&lt;/p&gt;

&lt;p&gt;以下コードの通り、RedPenが検知した名詞とスペルチェックの確認対象との編集距離を求め、0ではなく3以下であればスペルミスとみなします。編集距離を３としたのは勢いです。適当な値はこれから模索していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateSentence(sentence) {

  var levenshteinDistance = function(a, b) {
    var matrix = new Array(a.length + 1);
    for (var i = 0; i &amp;lt; a.length + 1; i++) {
      matrix[i] = new Array(b.length + 1);
    }

    for (var i = 0; i &amp;lt; a.length + 1; i++) {
      matrix[i][0] = i;
    }

    for (var j = 0; j &amp;lt; b.length + 1; j++) {
      matrix[0][j] = j;
    }

    for (var i = 1; i &amp;lt; a.length + 1; i++) {
      for (var j = 1; j &amp;lt; b.length + 1; j++) {
        var x = a[i - 1] == b[j -1] ? 0 : 1;
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j- 1] + x
        );
      }
    }

    return matrix[a.length][b.length];
  }


  console = {
      log: print,
      warn: print,
      error: print
  };

  var checkKeywordArray = [
    &#39;FortiGate&#39;,
    &#39;メルセデスベンツ&#39;,
    &#39;BIG-IP&#39;,
    &#39;インデックス&#39;,
    &#39;JavaScript&#39;
  ]

  for (var i = 0; i &amp;lt; sentence.tokens.length; i++) {
    // 名詞だけを対象に
    if (sentence.tokens[i].tags[0] == &#39;名詞&#39;) {
      for (var j=0; j &amp;lt; checkKeywordArray.length; j++) {
        //console.log(&#39;checking : &#39; + sentence.tokens[i].surface + &#39; and &#39; + checkKeywordArray[j])
        var dist = levenshteinDistance(sentence.tokens[i].surface,checkKeywordArray[j])        
        //console.log(sentence.tokens[i].surface +&#39; is &#39; + dist)
        if (dist &amp;lt;= 3 &amp;amp;&amp;amp; dist != 0){
          addError(sentence.tokens[i].surface + &#39;はスペルミスの可能性があります&#39;, sentence);
        }
      }
    }  
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScriptを利用したvalidatorをRedPenのコンフィグで有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat conf/redpen-conf-ja-custom.xml                                   
&amp;lt;redpen-conf lang=&amp;quot;ja&amp;quot;&amp;gt;
    &amp;lt;validators&amp;gt;
        &amp;lt;validator name=&amp;quot;SentenceLength&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;max_len&amp;quot; value=&amp;quot;100&amp;quot;/&amp;gt;
        &amp;lt;/validator&amp;gt;
        &amp;lt;validator name=&amp;quot;KatakanaEndHyphen&amp;quot;/&amp;gt;
        &amp;lt;validator name=&amp;quot;SectionLength&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;max_num&amp;quot; value=&amp;quot;1500&amp;quot;/&amp;gt;
        &amp;lt;/validator&amp;gt;
        &amp;lt;validator name=&amp;quot;ParagraphNumber&amp;quot;/&amp;gt;
        &amp;lt;validator name=&amp;quot;SuccessiveWord&amp;quot; /&amp;gt;
        &amp;lt;validator name=&amp;quot;JavaScript&amp;quot; /&amp;gt;　　
    &amp;lt;/validators&amp;gt;
&amp;lt;/redpen-conf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストするMarkdownは以下の通りです。あえて誤記をまぜます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more test.md

## どうだー

インデックスは正しいです

インデデクスは間違っています

メルセデスベンスは間違っています

メルセデスベンツは正しいです

FortiGateは正しいです

Fortigateは間違っています

Frotigateも間違っています
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストします。間違ったスペルのセンテンスだけをエラーとして検知していますね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redpen-distribution-1.4.1]$ bin/redpen -c conf/redpen-conf-ja-custom.xml -f markdown test.md
[2015-11-23 18:55:02.902][INFO ] cc.redpen.Main - Configuration file: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/redpen-conf-ja-custom.xml
[2015-11-23 18:55:02.910][INFO ] cc.redpen.ConfigurationLoader - Loading config from specified config file: &amp;quot;/home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/redpen-conf-ja-custom.xml&amp;quot;
[2015-11-23 18:55:02.921][INFO ] cc.redpen.ConfigurationLoader - Succeeded to load configuration file
[2015-11-23 18:55:02.921][INFO ] cc.redpen.ConfigurationLoader - Language is set to &amp;quot;ja&amp;quot;
[2015-11-23 18:55:02.921][WARN ] cc.redpen.ConfigurationLoader - No type configuration...
[2015-11-23 18:55:02.922][INFO ] cc.redpen.ConfigurationLoader - No &amp;quot;symbols&amp;quot; block found in the configuration
[2015-11-23 18:55:02.990][INFO ] cc.redpen.config.SymbolTable - &amp;quot;ja&amp;quot; is specified.
[2015-11-23 18:55:02.990][INFO ] cc.redpen.config.SymbolTable - &amp;quot;normal&amp;quot; type is specified
[2015-11-23 18:55:03.497][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[。, ？, ！]&amp;quot; are added as a end of sentence characters
[2015-11-23 18:55:03.498][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[’, ”]&amp;quot; are added as a right quotation characters
[2015-11-23 18:55:03.512][INFO ] cc.redpen.validator.Validator - max_len is set to 100
[2015-11-23 18:55:03.515][INFO ] cc.redpen.validator.Validator - max_num is set to 1500
[2015-11-23 18:55:03.516][INFO ] cc.redpen.validator.Validator - max_num is not set. Use default value of 5
[2015-11-23 18:55:03.519][INFO ] cc.redpen.validator.JavaScriptValidator - JavaScript validators directory: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/js
test.md:1: ValidationError[ParagraphNumber], The number of paragraphs exceeds the maximum of 7. at line: どうだー
test.md:5: ValidationError[JavaScript], [spellcheck.js] インデデクスはスペルミスの可能性があります at line: インデデクスは間違っています
test.md:7: ValidationError[JavaScript], [spellcheck.js] メルセデスベンスはスペルミスの可能性があります at line: メルセデスベンスは間違っています
test.md:13: ValidationError[JavaScript], [spellcheck.js] Fortigateはスペルミスの可能性があります at line: Fortigateは間違っています
test.md:15: ValidationError[JavaScript], [spellcheck.js] Frotigateはスペルミスの可能性があります at line: Frotigateも間違っています

[2015-11-23 18:55:04.483][ERROR] cc.redpen.Main - The number of errors &amp;quot;5&amp;quot; is larger than specified (limit is &amp;quot;1&amp;quot;).
[aimless@dev redpen-distribution-1.4.1]$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;RedPenを利用したスペルチェックがローカル環境で動くことを確認しました。JavaScriptでチェック項目を拡張できるのがいいですね。次はスペルチェック用辞書の単語を増やした上で、CircleCI上で動作させてみようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>リーダーな私が意識している事</title>
      <link>http://aimless.jp/blog/archives/2683</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2683</guid>
      <description>

&lt;p&gt;リーダと呼ばれるポジションに就き、5名のメンバーと一緒に仕事を行うこと3年、ふと「昔と比べると丸くなったなー」と思ったので、今意識している事をメモしておきます。社内研修や書籍、聖杯問答など、人を導くということについて色々な角度で学んだことを自分なりに消化した結果です。実際にできていることもあれば、中々できないこともあるので、今一度意識しなおして、半年くらい経ったら見返したい。&lt;/p&gt;

&lt;h2 id=&#34;信じて任せる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;信じて任せる&lt;/h2&gt;

&lt;p&gt;大原則として、メンバーを信じることにしています。また、メンバーを信じているということを、心の中で思っているだけでなくメンバーの前で明言します。「信じてるよ」と。メンバーを信じでいますので、能動的に仕事を回しているメンバーに対しては、仕事の細部に口を出すことはしません。信じて任せます。&lt;/p&gt;

&lt;h2 id=&#34;放置しない:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;放置しない&lt;/h2&gt;

&lt;p&gt;信じると放置するは違うと考えています。リーダである私は、チームとして与えられたミッションをクリアすることで評価されます。そのためには、自分のメンバーが成果を出すことが必要不可欠です。チームに与えられているミッションは、自分の力だけで解決できる量をとうに超えています。従って、信じていると宣言する一方で、メンバーの成果が出ていることを確認し、必要に応じて軌道修正を行うことを意識しています。&lt;/p&gt;

&lt;p&gt;例えば、週次ミーティングでの進捗報告や、メーリングリストに流れるメンバーのメールでのやりとりで、メンバーのアウトプットの有無や質を確認し、期待する成果に届いていない場合は声をかけます。困っているようであれば自分の仕事を止めて助け、悩んでいるようであれば一緒に悩みます。すべての変更作業について、私の承認が必要なプロセスにしているのも、放置しないの一環です。信じているし任せますが、最終的な責任まで放棄する気はありません。&lt;/p&gt;

&lt;h2 id=&#34;メンバーに決めさせる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;メンバーに決めさせる&lt;/h2&gt;

&lt;p&gt;リーダになった当初、リーダの仕事は決める事だと思っていましたが、何から何まで決めるのは止めました。特に、メンバーのタスクであれば、メンバーに決めてもらうことにしています。決められないのであれば、メンバーの悩みや迷いを聴いた上で、整理した上で再提示し、解決へのヒントを与える。こんな地味な事を繰り返し、メンバーに決めてもらう事を意識しています。&lt;/p&gt;

&lt;p&gt;当然、自分でも決められますし、自分で決めて指示したほうが早いこともあります。ですが、メンバーが自分で決められることを私が決めるということは、メンバーの力を疑っているということだと思います。前述した信じるというポリシーにも反します。また、何から何まで自分が決めていると、自分がチームのボトルネックになってしまい、チームとして与えられたミッションを達成できなくなってしまいます。ですから、信じるメンバーに悩んでもらい決めてもらうことにしました。&lt;/p&gt;

&lt;p&gt;一方で、メンバーが悩んでどうしても決められない場合や、チームとしての決断が必要な場合は、即判断します。リーダですから。&lt;/p&gt;

&lt;h2 id=&#34;ほめる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;ほめる&lt;/h2&gt;

&lt;p&gt;仕事だからやって当然という考えは捨てました。仕事はツライ。だからこそ、頑張ってくれたメンバーはしっかり褒める。メールだけでなく、言葉で、他のメンバーのいる場で褒めます。「さすが」「完璧」といった簡易な言葉でも構わないので、ほめることを意識しています。&lt;/p&gt;

&lt;p&gt;作業直前で手順の誤りに気がついた部下が相談に来たら、皆さんはどうしますか。「何やってんの、、」と怒りを示していませんか？私は褒めます。「作業する前に気がついてよかったじゃん。よく気がついたよ。ありがとね」と。怒っても仕方ない。&lt;/p&gt;

&lt;h2 id=&#34;感情を表に出す:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;感情を表に出す&lt;/h2&gt;

&lt;p&gt;あえて感情を表に出すことにしています。私が人間臭い人が好きだからです。ただし、自分の負の感情は除く。負の感情はメンバーのいないところで発散します。&lt;/p&gt;

&lt;p&gt;成果を出してくれたメンバーには、その成果を一緒に喜び、感謝します。メールだけでなく、言葉で。深夜作業や厳しい仕事を成し遂げたメンバーには、「無事終わってうれしい。ありがとう」と喜びと感謝を。&lt;/p&gt;

&lt;p&gt;チーム外から理不尽な扱いを受けているメンバーがいれば、その怒りは私が代わりに声を上げることにしています。仕事だからといって理不尽が許されるわけではない。そうはいってもメンバーは言いにくいでしょうから、私が代わりに怒りの声を上げることで、メンバーの気持ちを少しでも軽くできればと思ってやっています。&lt;/p&gt;

&lt;p&gt;しょうもない雑談と笑いも大事にしています。仕事の合間の雑談、楽しいでしょ。こういうの大事。&lt;/p&gt;

&lt;h2 id=&#34;やり方ではなくゴールを指示する:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;やり方ではなくゴールを指示する&lt;/h2&gt;

&lt;p&gt;仕事の細かいやり方を指示することはやめました。やり方はメンバーでも考えられるのですから（むしろメンバーの方が詳細に考えらえる事の方が多い）、やり方ではなく、私が期待する成果のあり姿を明確に伝える事を意識しています。「この仕事をお願いします。こーやって、あーやって、こうやってください」ではなく「この仕事をお願いします。成果物はこんなイメージ」であったり「この仕事をお願いします。○○できるようにするのがゴール」といったイメージです。&lt;/p&gt;

&lt;h2 id=&#34;門戸を開く:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;門戸を開く&lt;/h2&gt;

&lt;p&gt;「何かあったら相談してね」「出かけるけど、何かあったら携帯ならしてね」は口癖になりました。明言することで、相談や緊急時の連絡が増えたような気がしています。相談や緊急連絡が増えると自分の仕事は止まりますが、リーダというものは、こういうものだと割り切ることにしました。チームとして成果が出ればいいよ。ゆえに、リーダ以外の業務は、メンバーが退社した17時以降が本番です。&lt;/p&gt;

&lt;h2 id=&#34;チームである事を口にし続ける:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;チームである事を口にし続ける&lt;/h2&gt;

&lt;p&gt;自分とメンバーの事を「○○チーム」と呼ぶことを意識しています。私たちは個ではなくチームであること、つまり仲間であることを自分とメンバーに意識づけられればと思ってあえて言い続けています。最大の効果は、自分がチームのリーダであることを常に自分に意識づけし続けられることかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;最後に:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;　リーダーって何なんだろうなー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ソフトバンクショップでiPhone 6s Plusに機種変更したら、5137円/月のオプションが付いた</title>
      <link>http://aimless.jp/blog/archives/2680</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2680</guid>
      <description>

&lt;p&gt;iPhone 6s Plusに機種変更しました。画面が大きいのはいいことです。&lt;/p&gt;

&lt;p&gt;　さて、&lt;a href=&#34;http://akimotoshoji.blog.jp/archives/51481475.html&#34;&gt;iPhone6sの機種変で、ソフトバンクに3500円/月のオプション加入を迫られたwww&lt;/a&gt;を見て、「そういえば私もかなりのオプションサービスに加入したなぁ」と思ったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;加入したオプション一覧:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;加入したオプション一覧&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;サービス名&lt;/th&gt;
&lt;th&gt;月額料金&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;あんしん保証パックプラス&lt;/td&gt;
&lt;td&gt;￥702&lt;/td&gt;
&lt;td&gt;機種変更前も契約。機種変更後も利用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;基本パック&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;機種変更前も契約。機種変更後も利用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;機種変更先取りプログラム&lt;/td&gt;
&lt;td&gt;￥324&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;オススメコンテンツ&lt;/td&gt;
&lt;td&gt;￥324&lt;/td&gt;
&lt;td&gt;ことりっぷ、ライフレンジャー、music.jpのパック&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;とく放題（m）&lt;/td&gt;
&lt;td&gt;￥637&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;UULA&lt;/td&gt;
&lt;td&gt;￥504&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;アニメ放題&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ブック放題&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NETFLIX&lt;/td&gt;
&lt;td&gt;￥1026&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　さらに、速度維持の仕組みが「制限モード」から「快適モード」に変更になりました。「快適モード」だと、「3日で1Gバイト」の制限に引っかかった場合に、￥2500/2Gの権利が自動的に購入されます。つまり、この現代においてパケ死するモードです。&lt;/p&gt;

&lt;h2 id=&#34;対応:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;対応&lt;/h2&gt;

&lt;p&gt;　契約時に不要なオプションがつくのは儀式だと思っているので、お店の方と「今日家に帰ってすぐに全部解約してもいいんですよね？」「お店としては10月1日以降だとありがたいのですが・・・」というやり取りをしたうえで、不要なオプションは全部解約＆速度維持を制限モードに変更しました。&lt;/p&gt;

&lt;p&gt;　解約の手続きをお客様センターのオペレータさんにお願いしようと思ったのですが、オペレータさんの対応時間が20時までであり、帰宅したのが20時を過ぎていたため、MySoftbankで手続きを行いました。大変でした。&lt;/p&gt;

&lt;p&gt;　唯一、NETFLIXだけが、解約手続きをしたはずなのに、My Softbankのオプションサービス一覧に居続けています。これは、NETFLIXの契約が請求期間の最終日にキャンセルになる関係だと信じたい。&lt;/p&gt;

&lt;h2 id=&#34;感想:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;　お店の方は「いらなければ全部変更してくださいね」「（説明資料をマーキングしたうえで）これを外してくださいね」ときちんと説明してくれました。また、説明資料にはオプションサービスの解約方法がしっかり書いてありました。そのため、いらいないサービスを押し付けられたにも関わらず、お店の印象は悪くないという不思議。気持ちよく儀式を終えることができました。&lt;/p&gt;

&lt;p&gt;　「100発撃てば1発はあたる」と思ってやっているんでしょうが、この儀式、いったい誰の指示なんでしょうね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>asciidocをPDFに変換してみた（asciidoctor-pdf）</title>
      <link>http://aimless.jp/blog/archives/2641</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2641</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2506&#34;&gt;気軽にドキュメントを書く&lt;/a&gt;シリーズです。&lt;/p&gt;

&lt;p&gt;asciidocで書き、asciidoctor-pdfでさくっとPDFにするというソリューションがあるようなので試行錯誤を繰り返した結果、&lt;a href=&#34;https://gist.githubusercontent.com/kongou-ae/a3df7fb5aedf644acd72/raw/3227df201731519db0974813c1ff1f49dff19cc3/README.adoc&#34;&gt;この.adoc&lt;/a&gt;を&lt;a href=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/README.pdf&#34;&gt;このPDF&lt;/a&gt;に変換できるようになりました。&lt;/p&gt;

&lt;p&gt;使い方ではまった箇所をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;githubのREADMEに書いてある通り、gemでインストールするだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install --pre asciidoctor-pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デフォルトのテーマでpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;デフォルトのテーマでPDFに変換する&lt;/h2&gt;

&lt;p&gt;asciidoctor-pdfコマンドを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ asciidoctor-pdf basic-example.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自作テーマを利用してpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;自作テーマを利用してPDFに変換する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc&#34;&gt;Asciidoctor PDF Theming Guide&lt;/a&gt;に記載されている通り、自分なりのテーマを作ることができます。テーマを自作するにあたっては、&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/data/themes/default-theme.yml&#34;&gt;デフォルトテーマ&lt;/a&gt;の記載内容が参考になります。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://gist.github.com/kongou-ae/46291f86c53d959271a7&#34;&gt;basic-theme.yml&lt;/a&gt;を作りました。ファイルはresources/themes配下に配置されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自作テーマを利用するためには、asciidoctor-pdfコマンドの-aオプションで、pdf-stylesdirとpdf-styleを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ページ番号を振る:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ページ番号を振る&lt;/h2&gt;

&lt;p&gt;ヘッダーとフッターにページ番号を振ることができます。今回は、.adocに:pagenums:を設定した上で、テーマファイルにページ番号の具体的なスタイルを記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more README.adoc                                                                                   
= ほげほげサービス仕様書
ほげほげ株式会社 &amp;lt;doc.writer@example.jp&amp;gt;
v1.0, 2014-01-01
:toc:
:toc-title: 目次
:figure-caption: 図
:table-caption: 表
:toclevels: 2
:pagenums:
:sectnums:
:imagesdir: resources/images/


== はじめに

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はフッターの真ん中にページ番号を表示してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;footer:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [3mm,0,0,0]
  valign: top
  recto_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
  verso_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにフッターにページ番号が表示されます。今回はフッターにページ番号を付与しましたが、ヘッダーに付与することも可能です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_page_number.png&#34; alt=&#34;フッタ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ヘッダーやフッターに画像を追加する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ヘッダーやフッターに画像を追加する&lt;/h2&gt;

&lt;p&gt;ヘッダーやフッターに画像を追加することが可能です。まずは。追加したい画像をテーマと同じディレクトリに配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、以下の様に設定します。今回はrecto_content_rightに画像を表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [0,0,3mm,0]
  valign: bottom
  image_valign: 50
  recto_content:
    left: &amp;#039;{document-title}&amp;#039;
    right: image:header-img-10mm.png[width=&#34;75&#34;]
  verso_content:
    left: &amp;#039;{document-title}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヘッダの右に画像が表示されました。ただしverso_content_rightにはimageを指定していないので、右ページには画像が出ますが、左ページには画像が出ません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_header_image.png&#34; alt=&#34;ヘッダーに画像&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;フォントを指定する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;フォントを指定する&lt;/h2&gt;

&lt;p&gt;デフォルトでは以下3種類のフォントが利用可能です。これら以外のフォントを利用することも可能です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NotoSerif&lt;/li&gt;
&lt;li&gt;Mplus1mn&lt;/li&gt;
&lt;li&gt;Mplus1pMultilingual&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mplus1pMultilingual　にはboldがないので、migmix-1pを利用してみましょう。&lt;/p&gt;

&lt;p&gt;今回はresources/fonts配下にフォントを配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree                                                                                   
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |   `-- migmix-1p
    |       |-- ipag00303
    |       |   |-- IPA_Font_License_Agreement_v1.0.txt
    |       |   `-- Readme_ipag00303.txt
    |       |-- migmix-1p-bold.ttf
    |       |-- migmix-1p-regular.ttf
    |       `-- migmix-README.txt
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマファイルでmigmixを使うことを宣言します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font:
  catalog:
    migmix:
      normal: migmix-1p/migmix-1p-regular.ttf
      bold: migmix-1p/migmix-1p-bold.ttf
      italic: migmix-1p/migmix-1p-regular.ttf
      bold_italic: migmix-1p/migmix-1p-bold.ttf
  fallbacks:
    - migmix                                                                                                               
page:
  background_color: ffffff
  layout: portrait
  margin: [30mm, 30mm, 30mm, 30mm]
  size: A4
base:
  font_color: 000000
  font_family: migmix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;asciidoctor-pdfコマンドの-aオプションでpdf-fontsdirを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic -a pdf-fontsdir=/resources/fonts README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;所感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFは綺麗に描画された。&lt;/li&gt;
&lt;li&gt;描画に至るまでの準備が簡単&lt;/li&gt;
&lt;li&gt;テーマのスタイルファイルは独自形式なので、CSSでの装飾と比べると自由度は狭い。

&lt;ul&gt;
&lt;li&gt;たとえば、現在の私の力では、テーブルの横幅を縮めることができない。[width=&amp;#8221;50&amp;#8243;]で表の横幅が50%になるはずなのだが、PDFに表示される表の横幅は100%になってしまいまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必要最低限に装飾したPDFを作る分にはもってこいかも&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>気軽にドキュメントを書くための試行錯誤</title>
      <link>http://aimless.jp/blog/archives/2506</link>
      <pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2506</guid>
      <description>

&lt;p&gt;これまで、Wordの使い方を覚えた方が早いのは理解しつつ、設計書や仕様書といったドキュメントを気軽に書く方法を模索してきました。&lt;/p&gt;

&lt;h2 id=&#34;これまでの取り組み:955fa4efa5135950a9b3b93648703bd0&#34;&gt;これまでの取り組み&lt;/h2&gt;

&lt;h3 id=&#34;rest-rst2pdf:955fa4efa5135950a9b3b93648703bd0&#34;&gt;reST + rst2pdf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;reSTとrst2pdfを使ってドキュメントの内容と見た目を分離。&lt;/li&gt;
&lt;li&gt;便利ツールの稼働環境をdockerでコンテナにすることで、会社のWindows上での動作を実現。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2067&#34;&gt;気軽にドキュメントを書く（Sphinx + rst2pdf + LiveReload + docker）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF作成ツールのrst2pdfの情報が少なく、見た目を拡張することに限界を感じた。&lt;/li&gt;
&lt;li&gt;reSTよりもMarkdownを使いたくなった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;markdown-pandoc:955fa4efa5135950a9b3b93648703bd0&#34;&gt;markdown + pandoc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;コンテナの利用は継続。&lt;/li&gt;
&lt;li&gt;PDF作成ツールとして、rst2pdfの代わりにpandocを利用。これによりMarkdownを利用可能に。&lt;/li&gt;
&lt;li&gt;rst2pdfでは実現できなかった見た目の拡張性をtexで頑張ることにした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kongou-ae/doc-man&#34;&gt;doc-man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandocで日本語pdfを生成するためには日本語Latexの環境を用意する必要がある。これが気軽ではない。&lt;/li&gt;
&lt;li&gt;一からtexの作法を学習するコストが高すぎる。&lt;/li&gt;
&lt;li&gt;会社のマシンがSSDになりディスク容量が激減。ローカルに執筆環境のコンテナで持つことが厳しくなってきた。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-pdf印刷:955fa4efa5135950a9b3b93648703bd0&#34;&gt;Atom + PDF印刷&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;コンテナをやめる。&lt;/li&gt;
&lt;li&gt;見た目はCSSで頑張る。さようならtex。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結果

&lt;ul&gt;
&lt;li&gt;Atomを使って議事メモをmarkdownで書き、Markdown Previewで確認、そのままHTMLに保存してPDFとして印刷。&lt;/li&gt;
&lt;li&gt;議事メモ等の気軽な文章を気軽に作成する事には向くが、壮大な文章を気軽に書くことに不向き。&lt;/li&gt;
&lt;li&gt;表紙や目次などが含まれるちゃんとしたドキュメントの作成に向かない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;現在の取り組み:955fa4efa5135950a9b3b93648703bd0&#34;&gt;現在の取り組み&lt;/h2&gt;

&lt;p&gt;　上記の紆余曲折の結果、以下の形で試行錯誤を継続中です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方針

&lt;ul&gt;
&lt;li&gt;壮大な文章（設計書や仕様書）を気軽に作れる環境を目指す&lt;/li&gt;
&lt;li&gt;元ネタとなるプレーンテキストはMarkdownで書く。&lt;/li&gt;
&lt;li&gt;PDFの見た目は、CSSで頑張る。CSSで出来ない装飾はあきらめる。過剰な装飾はいらない。&lt;/li&gt;
&lt;li&gt;執筆環境をローカルのコンテナ上で動かすのをやめる。ローカルではテキストを書くだけ、管理やビルドはリモートのリポジトリに任せる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進捗

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kongou-ae/md-kumihan&#34;&gt;md-kumihan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kongou-ae/md-kumihan/master/src/test.md&#34;&gt;このMarkdown&lt;/a&gt;が、コマンド一つで[このPDF][5]になります。&lt;/li&gt;
&lt;li&gt;md-kumihanをGialabのリポジトリ上に配置し、ローカルでMarkdownを編集してPushすると、gitlab上のgit-hookやCIツールでPDFを自動ビルド、さらにリポジトリのwikiページにpdfへのリンクを作成とかもできます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ドキュメントを中心とした継続的な運用改善:955fa4efa5135950a9b3b93648703bd0&#34;&gt;ドキュメントを中心とした継続的な運用改善&lt;/h2&gt;

&lt;p&gt;　現在の会社では、運用チームのリーダとして継続的な運用の改善を生業としています。ちゃんとやれているかは、かなり疑問ですが。。&lt;/p&gt;

&lt;p&gt;　運用の仕組みはドキュメントにする必要があります。ですが、その時間は限られています。運用の仕組みは継続的に改善する必要があり、改善の結果はドキュメントに反映させる必要があります。ですが、その時間も限られています。&lt;/p&gt;

&lt;p&gt;　限られた時間の中で効率よくドキュメントを作成し、改定し続けるにはどうすればいいか。自分の中の一つの仮説が「気軽にドキュメントを書く」と「ドキュメントを中心とした運用改善」です。&lt;/p&gt;

&lt;p&gt;　時間がない中でまとまった文章を書くためには気軽である必要があります。限られた時間は文章の内容を作成することに注力し、見た目はツールにお任せする事が望ましい。これが「気軽にドキュメントを書く」という考え方です。&lt;/p&gt;

&lt;p&gt;　運用の仕組み＝ドキュメントですから、運用の問題点はドキュメントの問題、運用改善のゴールはドキュメントの改定です。運用の問題点は、随時ドキュメントのIssueとして起票し、対応方法を検討し実践していく。問題点の改善が完了したら、改善点を反映させるためのWIP Marge Requestを作り、ドキュメントの改定作業を実施する。運用改善のタスクが、対応するドキュメントのリポジトリを中心にして回っていく。これが「ドキュメントを中心とした運用改善」です。&lt;/p&gt;

&lt;p&gt;　こんな世界も悪くないんじゃないかなと考え、仮説を検証中です。「気軽にドキュメントを書く」と「ドキュメントを中心とした運用改善」を実現するためのmd-kumihanというツールはできたので、次は自分のチームで勝手に実践だ。&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;https://github.com/kongou-ae/md-kumihan/blob/master/pdf/test.pdf&#34;&gt;https://github.com/kongou-ae/md-kumihan/blob/master/pdf/test.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>出産に掛かる費用</title>
      <link>http://aimless.jp/blog/archives/1353</link>
      <pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/1353</guid>
      <description>

&lt;p&gt;子供が生まれたので、記念？に病院にかかった費用を簡単にまとめておきます。記憶があいまいな部分もありますが、今後出産を考えている人の参考になればなと。&lt;/p&gt;

&lt;h3 id=&#34;出産までの検診:a24886dad6ec2076a91d313e1924f45b&#34;&gt;出産までの検診&lt;/h3&gt;

&lt;p&gt;　母子手帳＆公費助成の受診票（詳細：&lt;a href=&#34;http://www.city.kashiwa.lg.jp/soshiki/061800/p003803.html&#34; title=&#34;妊婦一般健康診査&#34; target=&#34;_blank&#34;&gt;妊婦一般健康診査&lt;/a&gt;）をもらえるまでの診察は完全実費で￥5,000～￥10,000くらい、以降の診察はほとんど受診票が利用可能だったため、0円～数千円でした。受診表はマジで神。40週で生まれてきたので受診表はぴったり足りました。受診表がなくなった後の診察は完全実費なので、予定週に生まれてきた息子に感謝。&lt;/p&gt;

&lt;h3 id=&#34;出産:a24886dad6ec2076a91d313e1924f45b&#34;&gt;出産&lt;/h3&gt;

&lt;p&gt;　自然分娩で部屋は個室、入院中に受けた抗生物質の点滴、陣痛促進剤の点滴、栄養剤の点滴、出産後のリラクゼーションエステ？などを含め、総額は￥538,180でした。ここから出産育児一時金￥420,000が引かれ、窓口での支払いは￥118,180でした。なお、ITS独自の出産育児付加金￥90,000を事後申請したので、最終的な実費は￥28,180になる予定です。ここまで来るとほぼゼロ円ですね。ありがたいことです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>