<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redpen on Aimless</title>
    <link>http://aimless.jp/categories/redpen/</link>
    <description>Recent content in Redpen on Aimless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 25 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aimless.jp/categories/redpen/feed/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CircleCIのテストをスキップする</title>
      <link>http://aimless.jp/blog/archives/2016-04-25-skipping-test-by-circleci</link>
      <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2016-04-25-skipping-test-by-circleci</guid>
      <description>

&lt;h2 id=&#34;テストをスキップしたい時もある:4ea3f16a74861147e21314ea9d30e344&#34;&gt;テストをスキップしたい時もある&lt;/h2&gt;

&lt;p&gt;下図のようなデプロイメントプロセスでブログを書いています。CircleCIを中心としたプロセスで、それなりに便利なのですが、ブログを公開するためにはRedPenのテストに合格しなければなりません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-04-25-001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;RedPenのJavaScript拡張を利用したスペルチェックのロジックがイマイチなのか、前回のエントリ作成時に「Email」を「Gmail」や「Emacs」のスペルミスと判定する悲劇が起きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-04-18-sending-zabbix-alert-mail-by-gmail.md:17: ValidationError[JavaScript], [spellCheck.js] Emailはスペルミスの可能性があります。Emacsではありませんか？ at line: 管理＞メディアタイプ＞Emailから以下の通り設定します。
2016-04-18-sending-zabbix-alert-mail-by-gmail.md:17: ValidationError[JavaScript], [spellCheck.js] Emailはスペルミスの可能性があります。Gmailではありませんか？ at line: 管理＞メディアタイプ＞Emailから以下の通り設定します。

[2016-04-18 23:50:47.809][ERROR] cc.redpen.Main - The number of errors &amp;quot;2&amp;quot; is larger than specified (limit is &amp;quot;1&amp;quot;).

bash ./test-redpen.sh returned exit code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本来はテストを直すべきなのですが、「テストをスキップしたいことがあるだろう」ということで、任意のコミットについてCircleCIでのテストをスキップする仕組みを実装しました。&lt;/p&gt;

&lt;h2 id=&#34;circleci標準のスキップ機能:4ea3f16a74861147e21314ea9d30e344&#34;&gt;CircleCI標準のスキップ機能&lt;/h2&gt;

&lt;p&gt;CircleCIに標準実装されている機能は&lt;code&gt;[skip ci]&lt;/code&gt;です。コミットログに&lt;code&gt;[skip ci]&lt;/code&gt;を含めるとCircleCIによる処理が行われません。&lt;/p&gt;

&lt;p&gt;私の場合、③テストだけをスキップしたいので、&lt;code&gt;[skip ci]&lt;/code&gt;はやりすぎです。CircleCIによる処理が行われない場合、HUGOによるビルトやGitHub Pagesへの公開がなされないためです。&lt;/p&gt;

&lt;h2 id=&#34;実装:4ea3f16a74861147e21314ea9d30e344&#34;&gt;実装&lt;/h2&gt;

&lt;p&gt;そこでテスト実行のスクリプトに、コミットメッセージに応じた条件分岐を追加することにしました。&lt;/p&gt;

&lt;p&gt;直近のコミットメッセージは&lt;code&gt;git log -n 1 --oneline --pretty=format:&amp;quot;%s&amp;quot;&lt;/code&gt;で取得できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\Hugo\aimless.jp&amp;gt; git log -n 1 --oneline
bbe9a63 add image
PS C:\Hugo\aimless.jp&amp;gt; git log -n 1 --oneline --pretty=format:&amp;quot;%s&amp;quot;
add image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドの結果を利用してテスト実行のスクリプトを分岐させることで、コミットメッセージに応じてテストがスキップされるようにします。テスト実行のスクリプトを以下のようにすると、コミットメッセージに&lt;code&gt;[skip test]&lt;/code&gt;が含まれている場合、RedPenによるテストが実行されません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
mv redpen/blog.xml redpen-*/conf
mv redpen/*.js redpen-*/js


filename=`git diff HEAD^ HEAD --name-only`

commitMassage=`git log -n 1 --oneline --pretty=format:&amp;quot;%s&amp;quot;`

if [[ $filename =~ .*\.md$ ]] ;then
    if [[ &amp;quot;$commitMassage&amp;quot; =~ \[&amp;quot;skip test&amp;quot;\] ]]; then
        echo &amp;quot;redpen test is skipped.&amp;quot;
    else
        echo &amp;quot;start to test $filename....&amp;quot;
        redpen-*/bin/redpen -c redpen-*/conf/blog.xml -f markdown $filename
    fi
else
    echo &amp;quot;$filename is not markdown. Redpen test is skipped.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;動作確認:4ea3f16a74861147e21314ea9d30e344&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;コミットメッセージを「update」とすると、CircleCIによってRedPenのテストが実行されます。ひらがなにしたほうが読みやすい表現に関するエラーがでています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-04-25-002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コミットメッセージを「update [skip test]」とすると、CircleCIによるRedPenのテストは実行されません。そのかわりに、スクリプトで設定した&lt;code&gt;redpen test is skipped.&lt;/code&gt;が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-04-25-003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ:4ea3f16a74861147e21314ea9d30e344&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;任意のコミットメッセージによって、CircleCIが実行するテスト用スクリプトを分岐させてみました。CIツールが実行する処理を、個々のコマンドを実行する形ではなく、個々のコマンドをまとめたスクリプトを実行する形にすると、コミットメッセージに応じてCIツールのテストの処理を分岐させることができます。これはテストに限らず、いろいろなシーンで活用できそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RedPenで「開いた（平仮名）のほうが読みやすくなる表現一覧」をチェックする</title>
      <link>http://aimless.jp/blog/archives/2016-02-09-check-the-readable-expression-by-redpen</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2016-02-09-check-the-readable-expression-by-redpen</guid>
      <description>

&lt;p&gt;RedPenのJavaScript拡張を利用して、&lt;a href=&#34;http://www.danshihack.com/2015/06/04/junp/twitter-editter-kana.html&#34;&gt;プロの編集が教える「開いた（平仮名）のほうが読みやすくなる表現一覧」が超勉強になると話題&lt;/a&gt;に乗っている修正事項をチェックしてみました。&lt;/p&gt;

&lt;h2 id=&#34;javascript拡張:168337d188fe34a2b2c2d8d61b97e765&#34;&gt;Javascript拡張&lt;/h2&gt;

&lt;p&gt;表現一覧から、日常で使ってしまいそうな表現だけをチェックするようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat js/easyReadCheck.js
function validateSentence(sentence) {

  var checkKeywordObj = {
    &#39;更に&#39; : &#39;さらに&#39;,
    &#39;殆ど&#39; : &#39;ほとんど&#39;,
    &#39;下さい&#39; : &#39;ください&#39;,
    &#39;何時か&#39; : &#39;いつか&#39;,
    &#39;事&#39; : &#39;こと&#39;,
    &#39;何時か&#39; : &#39;いつか&#39;,
    &#39;何処か&#39; : &#39;どこか&#39;,
    &#39;何故か&#39; : &#39;なぜか&#39;,
    &#39;後で&#39; : &#39;あとで&#39;,
    &#39;出来るだけ&#39; : &#39;できるだけ&#39;,
    &#39;ひと通り&#39; : &#39;ひととおり&#39;,
    &#39;丁度&#39; : &#39;ちょうど&#39;,
    &#39;時間が経つ&#39; : &#39;時間がたつ&#39;,
    &#39;何でも&#39; : &#39;なんでも&#39;,
  }

  // 各センテンスに対して、checkKeywordObj分処理を実施
  for (var i = 0; i &amp;lt; Object.keys(checkKeywordObj).length; i++) {
    // キーワードを正規表現にセット
    var regex = new RegExp(Object.keys(checkKeywordObj)[i])
    // もしセンテンスの文章がcheckKeywordObjにマッチしたら
    if ( sentence.content.match(regex) ){
      // そのセンテンスが自然言語処理された結果を総当たり
      for (var j = 0; j &amp;lt; sentence.tokens.length; j++) {
        // 自然言語解析の結果とキーワードが一致したらエラーメッセージを出力
        if ( sentence.tokens[j].surface == Object.keys(checkKeywordObj)[i] ){
          addError(&#39;「&#39; + sentence.tokens[j].surface + &#39;」を「&#39; + checkKeywordObj[Object.keys(checkKeywordObj)[i]] + &#39;」に修正してください&#39;, sentence);            
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テストしてみる:168337d188fe34a2b2c2d8d61b97e765&#34;&gt;テストしてみる&lt;/h2&gt;

&lt;p&gt;以下の文章をテストしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ごはんの事である。何時かご飯を食べて下さい。

あなたはご飯を食べる事が出来ます。更に、ラーメンを食べることもできます。

事件は会議室で起きてるんじゃない。現場で起きているんだ。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとエラーになりました。ブログをデプロイしているCircleCIでも使おう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2016-02-09 01:05:48.540][INFO ] cc.redpen.Main - Configuration file: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/blog.xml
[2016-02-09 01:05:48.549][INFO ] cc.redpen.ConfigurationLoader - Loading config from specified config file: &amp;quot;/home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/blog.xml&amp;quot;
[2016-02-09 01:05:48.562][INFO ] cc.redpen.ConfigurationLoader - Succeeded to load configuration file
[2016-02-09 01:05:48.563][INFO ] cc.redpen.ConfigurationLoader - Language is set to &amp;quot;ja&amp;quot;
[2016-02-09 01:05:48.563][WARN ] cc.redpen.ConfigurationLoader - No type configuration...
[2016-02-09 01:05:48.564][INFO ] cc.redpen.ConfigurationLoader - No &amp;quot;symbols&amp;quot; block found in the configuration
[2016-02-09 01:05:48.637][INFO ] cc.redpen.config.SymbolTable - &amp;quot;ja&amp;quot; is specified.
[2016-02-09 01:05:48.638][INFO ] cc.redpen.config.SymbolTable - &amp;quot;normal&amp;quot; type is specified
[2016-02-09 01:05:49.178][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[。, ？, ！]&amp;quot; are added as a end of sentence characters
[2016-02-09 01:05:49.178][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[’, ”]&amp;quot; are added as a right quotation characters
[2016-02-09 01:05:49.193][INFO ] cc.redpen.validator.Validator - max_num is set to 1500
[2016-02-09 01:05:49.195][INFO ] cc.redpen.validator.Validator - max_num is not set. Use default value of 5
[2016-02-09 01:05:49.198][INFO ] cc.redpen.validator.JavaScriptValidator - JavaScript validators directory: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/js
test2.md:1: ValidationError[ParagraphNumber], The number of paragraphs exceeds the maximum of 7. at line: 実行
test2.md:12: ValidationError[JavaScript], [spellCheck.js] Fortigateはスペルミスの可能性があります at line: Fortigate
test2.md:14: ValidationError[JavaScript], [spellCheck.js] Javascriptはスペルミスの可能性があります at line: Javascript
test2.md:16: ValidationError[JavaScript], [easyReadCheck.js] 「事」を「こと」に修正してください at line: ごはんの事である。
test2.md:16: ValidationError[JavaScript], [easyReadCheck.js] 「下さい」を「ください」に修正してください at line: 何時かご飯を食べて下さい。
test2.md:18: ValidationError[JavaScript], [easyReadCheck.js] 「事」を「こと」に修正してください at line: あなたはご飯を食べる事が出来ます。
test2.md:18: ValidationError[JavaScript], [easyReadCheck.js] 「更に」を「さらに」に修正してください at line: 更に、ラーメンを食べることもできます。

[2016-02-09 01:05:50.390][ERROR] cc.redpen.Main - The number of errors &amp;quot;7&amp;quot; is larger than specified (limit is &amp;quot;1&amp;quot;).
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>