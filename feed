<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aimless</title>
    <link>http://aimless.jp/</link>
    <description>Recent content on Aimless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://aimless.jp/feed/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>flowlogs-readerを使って、VPC Flow Logsをコマンドラインで操作する</title>
      <link>http://aimless.jp/blog/archives/2016-02-02-retrieving-aws-vpc-flow-logs-using-flowlogs-reader</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2016-02-02-retrieving-aws-vpc-flow-logs-using-flowlogs-reader</guid>
      <description>

&lt;p&gt;VPC Flow Logsを分析、可視化する方法を模索しており、以下のツール・サービスを試しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sumologic&lt;/li&gt;
&lt;li&gt;Splunk&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;li&gt;ElasticSearch Service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれも素晴らしいツールなのですが、気軽にログを調査する、集計するといった用途で使うには少々大がかりです。もっと気軽なツールはないかとGithubをさまよった結果、&lt;a href=&#34;https://github.com/obsrvbl/flowlogs-reader&#34;&gt;obsrvbl/flowlogs-reader&lt;/a&gt;というツールを見つけたので試してみました。&lt;/p&gt;

&lt;h2 id=&#34;インストール:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;READMEに書いてある通りです。ソースからインストールしてみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/obsrvbl/flowlogs-reader.git
cd flowlogs-reader
pyenv exec python setup.py develop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;基本操作:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;基本操作&lt;/h2&gt;

&lt;p&gt;READMEに従って、&lt;code&gt;flowlogs_reader logGroupName&lt;/code&gt;を実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup

Traceback (most recent call last):
（中略）
botocore.exceptions.ClientError: An error occurred (ResourceNotFoundException) when calling the FilterLogEvents operation: The specified log group does not exist.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そんなロググループはないと怒られました。これはリージョンを指定していないことが原因です。デフォルトのリージョンはus-east-1になっていますが、私のAWSアカウントのus-east-1にはlogGroupNameというVPC Flow Logsが存在しません。東京リージョンにはlogGroupNameというVPC Flow Logsが存在していますので、&lt;code&gt;--region&lt;/code&gt;で東京リージョンを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup --region ap-northeast-1       
2 743065858817 eni-63444414 54.245.120.220 172.20.0.10 443 51378 6 13 1982 1454337327 1454337447 ACCEPT OK       
2 743065858817 eni-63444414 103.246.150.154 172.20.0.10 443 47354 6 10 1223 1454337327 1454337447 ACCEPT OK      
2 743065858817 eni-63444414 27.0.2.250 172.20.0.10 443 50540 6 10 935 1454337327 1454337387 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 103.246.150.154 47354 443 6 12 1501 1454337327 1454337447 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 27.0.2.250 50539 443 6 12 1501 1454337327 1454337387 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 27.0.2.250 50540 443 6 12 1501 1454337327 1454337387 ACCEPT OK
2 743065858817 eni-63444414 195.99.212.67 172.20.0.10 53 57627 17 1 77 1454337327 1454337387 REJECT OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出ました！なにこれすごい！&lt;/p&gt;

&lt;h3 id=&#34;時間指定:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;時間指定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-s&lt;/code&gt;と&lt;code&gt;-e&lt;/code&gt;オプションを使うことで、抽出する範囲を限定することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup --region ap-northeast-1 -s &#39;2016-02-01 10:59:00&#39; -e &#39;2016-02-01 11:00:00&#39;
2 743065858817 eni-63444414 172.20.0.10 103.246.150.154 44589 443 6 12 1501 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 103.246.150.154 172.20.0.10 443 44589 6 10 935 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 103.246.150.154 172.20.0.10 443 44591 6 10 935 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 54.245.120.220 172.20.0.10 443 48618 6 7 1079 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 103.246.150.154 44591 443 6 12 1501 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 103.246.150.154 44592 443 6 6 313 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 103.246.150.154 172.20.0.10 443 44588 6 9 895 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 103.246.150.154 172.20.0.10 443 44592 6 4 306 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 54.245.120.220 48618 443 6 11 2232 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 103.246.150.154 44588 443 6 12 1501 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-98fccfd1 104.216.59.132 172.20.0.106 57664 6379 6 1 40 1454324381 1454324411 REJECT OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおお、すごい。VPC Flow Logs内のstartをもとにフィルタリングしてるようです。&lt;/p&gt;

&lt;h2 id=&#34;ipアドレスで抽出:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;IPアドレスで抽出&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;findip&lt;/code&gt;を利用することで、IPアドレスを利用したログの抽出が可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup findip 54.245.120.220 --region
 ap-northeast-1 -s &#39;2016-02-01 10:59:00&#39; -e &#39;2016-02-01 11:00:00&#39;                                                
2 743065858817 eni-63444414 54.245.120.220 172.20.0.10 443 48618 6 7 1079 1454324362 1454324415 ACCEPT OK
2 743065858817 eni-63444414 172.20.0.10 54.245.120.220 48618 443 6 11 2232 1454324362 1454324415 ACCEPT OK
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;awkで処理する:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;AWKで処理する&lt;/h2&gt;

&lt;p&gt;VPC Flow Logsの内容が標準出力されるということは、AWKで自由に編集できるということです。&lt;/p&gt;

&lt;p&gt;まずは、VPC Flow Logsの時刻をJSTに変換、かつ不要なフィールドを削除することで可読性を向上してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup --region ap-northeast-1 -s &#39;2016-02-01 10:59:00&#39; -e &#39;2016-02-01 11:00:00&#39; | awk -F&amp;quot; &amp;quot; &#39;{print strftime(&amp;quot;%F %T %Z&amp;quot;,$11) &amp;quot; &amp;quot; $4 &amp;quot; &amp;quot; $5 &amp;quot; &amp;quot; $6 &amp;quot; &amp;quot;
 $7 &amp;quot; &amp;quot; $10 &amp;quot; &amp;quot; $13}&#39;
2016-02-01 19:59:22 JST 172.20.0.10 103.246.150.154 44589 443 1501 ACCEPT
2016-02-01 19:59:22 JST 103.246.150.154 172.20.0.10 443 44589 935 ACCEPT
2016-02-01 19:59:22 JST 103.246.150.154 172.20.0.10 443 44591 935 ACCEPT
2016-02-01 19:59:22 JST 54.245.120.220 172.20.0.10 443 48618 1079 ACCEPT
2016-02-01 19:59:22 JST 172.20.0.10 103.246.150.154 44591 443 1501 ACCEPT
2016-02-01 19:59:22 JST 172.20.0.10 103.246.150.154 44592 443 313 ACCEPT
2016-02-01 19:59:22 JST 103.246.150.154 172.20.0.10 443 44588 895 ACCEPT
2016-02-01 19:59:22 JST 103.246.150.154 172.20.0.10 443 44592 306 ACCEPT
2016-02-01 19:59:22 JST 172.20.0.10 54.245.120.220 48618 443 2232 ACCEPT
2016-02-01 19:59:22 JST 172.20.0.10 103.246.150.154 44588 443 1501 ACCEPT
2016-02-01 19:59:41 JST 104.216.59.132 172.20.0.106 57664 6379 40 REJECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すごく見やすくなりました。一般的なファイアウォールのログのようです。この形式であればトラブルシュートが簡単ですね。&lt;/p&gt;

&lt;p&gt;どのようなデータを得られるかは、分析の要件をシェル芸で実装できるかどうか次第です。私はシェル芸力が赤ちゃんレベルなので、Google先生に聞きながら、172.20.0.10からのOutbound通信を、通信量が多いホスト順に集計するワンライナーを書いてみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv exec flowlogs_reader VPCFlowLogGroup --region ap-northeast-1 | awk -F&amp;quot; &amp;quot; &#39;{if($4 ~ /^172.20.0.10$/) print $4 &amp;quot; &amp;quot; $5 &amp;quot; &amp;quot; $6 &amp;quot; &amp;quot; $7 &amp;quot; &amp;quot; $10}&#39; | awk -F &amp;quot; &amp;quot; &#39;{ arr[$2] += $5 } END {for
 (i in arr) {print arr[i] &amp;quot;\t&amp;quot; i } }&#39; | sort -nr
1953728 xxx.246.150.182
1513154 xxx.0.2.250
1403416 xxx.2.107.75
585957  xxx.246.150.154
230835  xxx.245.91.49
99516   xxx.245.231.247
68348   xxx.214.251.251
59299   xxx.112.97.146
29665   xxx.245.120.220
2657    xxx.32.102.213
1368    xxx.7.236.66
684     xxx.106.180.168
228     xxx.7.154.29
228     xxx.250.35.250
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おお、できたっぽい！&lt;/p&gt;

&lt;h2 id=&#34;所感:ca10f760ffb323fafc126a34735ccb7a&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;過去触ってきた各種サービスは、VPC Flow Logsを継続的に保管し、傾向を分析、可視化するにはもってこいです。ですが、トラブルシュートなどのスポット用途でログを見たい、分析したいという用途には少々オーバースペックです。そんな人には、&lt;a href=&#34;https://github.com/obsrvbl/flowlogs-reader&#34;&gt;obsrvbl/flowlogs-reader&lt;/a&gt;をお勧めします。気軽ですよ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sumologicを使ってVPC Flow Logsを可視化する</title>
      <link>http://aimless.jp/blog/archives/2016-01-24-analysing-vpcflowlogs-by-sumologic</link>
      <pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2016-01-24-analysing-vpcflowlogs-by-sumologic</guid>
      <description>

&lt;h2 id=&#34;vpc-flow-logsを可視化したい:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;VPC FLow Logsを可視化したい&lt;/h2&gt;

&lt;p&gt;検証環境のVPC Flow Logsを収集、調査、分析するためにElasticSearch Serviceを利用していましたが、利用料をケチるためにt2.microで動かしていたため動作が遅く困っていました。オンプレミスで十分なリソースを積んだElasticSearchを立ててもよかったのですが、目的はログを分析することであって、ElasticSearchを運用することではありません。&lt;/p&gt;

&lt;p&gt;そこで、VPC FLow Logsに対応しており、無料プランのあるログ分析SaaSを調べたところ、&lt;a href=&#34;https://www.sumologic.com/&#34;&gt;sumologic&lt;/a&gt;が見つかりました。Re:Invent2015の会場で相撲を取っていたあのsumologicです。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://www.youtube.com/watch?v=WLuH-Rht3nw&#34;&gt;Sumo wrestling, presented by SumoLogic @ AWS re:Invent2015 Game 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;トライアル期間を利用して、さらっと触ってみた結果をメモしておきます。&lt;/p&gt;

&lt;p&gt;なお、現時点でのプランが30日トライアルのため、sumologicの全機能が利用できる状況です。30日後にフリープランになった場合、このエントリーに記載したことの何ができなくなるのか少々不安です。30日後に確認します。（参考：&lt;a href=&#34;https://www.sumologic.com/pricing/&#34;&gt;Pricing&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;sumologicにログを転送する仕組み:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;SumoLogicにログを転送する仕組み&lt;/h2&gt;

&lt;p&gt;sumologicにログを転送する方法は2つあります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;詳細&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;installed Collector&lt;/td&gt;
&lt;td&gt;自前のサーバ上にインストールするコレクター。サーバにエージェントが常駐する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Hosted Collector&lt;/td&gt;
&lt;td&gt;sumologic上にホストされているコレクター。サーバにエージェントをインストールする必要なし&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;詳細は&lt;a href=&#34;https://service.sumologic.com/help/Default.htm#Difference_between_Collectors.htm%3FTocPath%3DSending%2520Data%7CCollectors%7C_____1&#34;&gt;What&amp;rsquo;s the difference between Collector types?&lt;/a&gt;を参照ください。&lt;/p&gt;

&lt;p&gt;Hosted CollectorはデフォルトでAWSの以下サービスに対応しています。残念なことに、現時点でVPC Flow Logsには未対応です。（VPC Flow LogsをS3に吐き出せば、そのログを取得できるかもしれません）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;ELB&lt;/li&gt;
&lt;li&gt;CloudFront&lt;/li&gt;
&lt;li&gt;CloudTrail&lt;/li&gt;
&lt;li&gt;Config&lt;/li&gt;
&lt;li&gt;S3 Audit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;sumologicにvpc-flow-logsを送る方法:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;sumologicにVPC Flow Logsを送る方法&lt;/h2&gt;

&lt;p&gt;公式のヘルプ(&lt;a href=&#34;https://service.sumologic.com/help/Default.htm#Collecting_Amazon_VPC_Flow_Logs.htm%3FTocPath%3DApps%7CSumo%2520Logic%2520App%2520for%2520Amazon%2520VPC%2520Flow%2520Logs%7C_____1&#34;&gt;Collecting Amazon VPC Flow Logs&lt;/a&gt;)に従い、installed Collectorを利用したログ転送を試したのですが、以下のエラーが出てしまい上手く行きませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-01-22 17:39:29,994 10946 [pool-2-thread-4] INFO com.amazonaws.internal.DefaultServiceEndpointBuilder  - {logs, ap-southeast-1} was not found in region metadata, trying to construct an endpoint using the standard pattern for this region: &#39;logs.ap-southeast-1.amazonaws.com&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこで今回は、sumologicのgithubリポジトリで公開されているLambdaファンクション（&lt;a href=&#34;https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs&#34;&gt;SumoLogic/sumologic-aws-lambda&lt;/a&gt;）を利用することにしました。このLambdaファンクションは、VPC Flow Logsに特化したものではなく、sumologicのAPIを利用してCloudWatch Logsをsumologicに送るものです。そのため、VPC Flow Logs以外でも利用可能です。&lt;/p&gt;

&lt;p&gt;なお、sumologicのAPI（Collector Management API）は、PROFESSIONALプラン以上で利用可能です。そのため、FREEプランでは利用できません。。。&lt;/p&gt;

&lt;h2 id=&#34;sumologicにログを送る:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;sumologicにログを送る&lt;/h2&gt;

&lt;p&gt;Hosted Collectorを作成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成したHosted Collectorに、HTTPSでデータを投入できるAPIエンドポイントを追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成したエンドポイントの情報を元に&lt;a href=&#34;https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs&#34;&gt;SumoLogic/sumologic-aws-lambda&lt;/a&gt;の内容を修正して、Lambdaファンクションを作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最後に、作成したLambdaファンクションをVPC Flow LogsのSubscriptionに追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ログを可視化する:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;ログを可視化する&lt;/h2&gt;

&lt;p&gt;sumologicには標準でVPC Flow Logsを可視化するAppsが用意されています。とりあえずこれを利用します。FREEプランになっても使えるかは要確認です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Appには複数のダッシュボードとクエリが定義されています。とりあえずActivityなるダッシュボードを見てみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;超カッコいい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-013.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ログを検索する:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;ログを検索する&lt;/h2&gt;

&lt;p&gt;独自のクエリ言語を利用して、ログを検索することができます。&lt;/p&gt;

&lt;p&gt;取り込んだVPC Flow Logsを送信元IPアドレスで限定して、送信元IPアドレスと宛先IPアドレスで分類して転送バイトを合計、さらに合計値でソートしてみます。アウト方向の転送量が多い通信を特定するクエリをイメージしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_sourceCategory=xxxx_vpcflowlogs message
| json &amp;quot;message&amp;quot;,&amp;quot;logStream&amp;quot;,&amp;quot;logGroup&amp;quot;
| parse field=message &amp;quot;* * * * * * * * * * * * * *&amp;quot; as version,accountID,interfaceID,src_ip,dest_ip,src_port,dest_port,Protocol,Packets,bytes,StartSample,EndSample,Action,status
| where src_ip = &amp;quot;172.20.0.10&amp;quot;
| sum(bytes) group by src_ip,dest_ip
| sort by _sum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クエリの結果が、下の方に表示されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果をCSVでダウンロードすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果をグラフにすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さらに結果をダッシュボードに追加することもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-017.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2016-01-24-018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;雑な所感:d7ed45000ec743b096ff53f4eb6f2750&#34;&gt;雑な所感&lt;/h2&gt;

&lt;p&gt;有料のSaaSだけあってかなり使いやすいです。また、Hosted Collectorを利用することで、サーバレスでAWSの各種ログを収集・分析することができます。今後、AWSのログを保存・分析するための基盤のお仕事があった場合、検討候補にしたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon WorkSpacesを不便にする</title>
      <link>http://aimless.jp/blog/archives/2016-01-23-inconvenient-workspaces</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2016-01-23-inconvenient-workspaces</guid>
      <description>

&lt;p&gt;WorkSpacesは大変気軽です。ですが、リモートアクセス用途での導入を検討した場合、あまりにも気軽に社内LANにアクセスできてしまうことが問題となります。標準の設定のまま利用者に使わせると、社内LANに新たなリスクを生み出すことになります。&lt;/p&gt;

&lt;p&gt;もう少し不便にすることでセキュリティを高められないか、と考え、WorkSpacesのセキュリティや監査に関する機能を調査したのでメモします。
なお多要素認証については当たり前なので触れません。&lt;/p&gt;

&lt;h2 id=&#34;認証情報の記憶を無効化する:052ae81a42bf391414298e21d62dd7a3&#34;&gt;認証情報の記憶を無効化する&lt;/h2&gt;

&lt;p&gt;WorkSpacesクライアントは、認証情報を記憶する機能（Remember Me）があります。これを利用することで、次回以降のログインにおいてIDとパスワードの入力が不要となります。多要素認証を使っている場合、多要素認証のパスワードも記憶します。&lt;/p&gt;

&lt;p&gt;この機能は大変便利ですが、社外からのリモートアクセス用途の場合、第三者による不正利用のリスクが生まれます。この機能は利用しているDirectory Service単位で無効にすることができます。詳細は&lt;a href=&#34;http://aimless.jp/blog/archives/2015-12-15-aws-workspaces-with-remember-me/&#34;&gt;Amazon WorkSpacesのRemember Me機能を使う&lt;/a&gt;を参照ください。&lt;/p&gt;

&lt;h2 id=&#34;利用状況を記録する:052ae81a42bf391414298e21d62dd7a3&#34;&gt;利用状況を記録する&lt;/h2&gt;

&lt;p&gt;リモートアクセス用途の場合、有事の際に備えて、いつ誰が使っていたかをロギングできることが望ましいでしょう。&lt;/p&gt;

&lt;p&gt;AWSでロギングといえばCloudTrailですが、WorkSpacesの利用状況はCloudTrailでロギングされません。WorkSpacesクライアントがWorkSpacesに接続する際にAPI Callが行われないからです。そのかわり、CloudWatchの以下メトリックに利用状況に関するデータが保存されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ConnectionFailure&lt;/li&gt;
&lt;li&gt;ConnectionSuccess&lt;/li&gt;
&lt;li&gt;InSessionLatency&lt;/li&gt;
&lt;li&gt;SessionDisconnect&lt;/li&gt;
&lt;li&gt;SessionLaunchTime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudWatchにはWorkSpaces単位でメトリックが保存されます。原則、WorkSpacesは1ユーザ1端末ですので、いつ誰がWorkSpacesを利用したかが記録されていると言ってもいいでしょう。ただし、CloudWatchのデータは2週間しか保存されませんので、長期間の保存（例えば13か月分）が必要な場合は、APIを利用して外部のサーバにデータを記録しなけばなりません。&lt;/p&gt;

&lt;p&gt;なお、現時点で、どこから（送信元IPアドレス）と、どの端末（WorkSpacesクライアントがインストールされている環境）からを調べることはできません。実装されるとうれしいです。&lt;/p&gt;

&lt;h2 id=&#34;情報漏えいを防ぐ:052ae81a42bf391414298e21d62dd7a3&#34;&gt;情報漏えいを防ぐ&lt;/h2&gt;

&lt;p&gt;デフォルトのAmazon WorkSpacesは、クリップボードのリダイレクトが有効になっています。WorkSpacesでコピーしたものを、WorkSpacesクライアントが動作するPCにペーストすることができます。リモートアクセス用途でWorkSpacesを利用している場合、技術的には、悪意あるユーザが情報を漏洩させることができます。&lt;/p&gt;

&lt;p&gt;Amazon WorkSpacesがAD ConnectorによってActive Directoryの管理下にある場合、グループポリシを利用して以下の機能を制限することができます。これにより、WorkSpaces内のデータを外部に持ち出されるリスクを極小化することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クリップボードによるコピペ&lt;a href=&#34;http://docs.aws.amazon.com/workspaces/latest/adminguide/group_policy.html#gp_clipboard&#34;&gt;(Clipboard Redirection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ローカルプリンタを利用した印刷&lt;a href=&#34;http://docs.aws.amazon.com/workspaces/latest/adminguide/group_policy.html#gp_local_printers&#34;&gt;(Local Printer Support)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;不要なセッションを積極的に切断する:052ae81a42bf391414298e21d62dd7a3&#34;&gt;不要なセッションを積極的に切断する&lt;/h2&gt;

&lt;p&gt;WorkSpacesクライアントは、ネットワークが切れない限りセッションを維持します。所謂アイドルタイムアウトがないようです。リモートアクセス用途の場合、使っていないのに社内LANへのアクセス口が有効になっていることはリスクです。&lt;/p&gt;

&lt;p&gt;現時点で、アイドルタイムアウトの設定は、WorkSpacesのサービス単体では実装できません。ただし、WorkSpacesがAD ConnectorによってActive Directoryの管理下にある場合、グループポリシによってアイドルタイムアウトの設定を行うことが可能です。具体的な設定は以下URLを参照ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://technet.microsoft.com/ja-jp/library/cc758177%28v=ws.10%29.aspx&#34;&gt;切断されたセッション、アクティブなセッション、およびアイドル状態のセッションに対するタイムアウト値を設定する&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ:052ae81a42bf391414298e21d62dd7a3&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;これまでの設定を実施すると、以下のようなWorkSpacesが完成します。かなり不便になりました。ですが、WorkSpacesをリモートアクセス用途で使う場合のリスクを大幅に軽減することができました。満足。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;利用するたびに、多要素認証でログインする必要がある&lt;/li&gt;
&lt;li&gt;いつ使ったか、モニタリングできる&lt;/li&gt;
&lt;li&gt;画面転送しかできない&lt;/li&gt;
&lt;li&gt;使っていないと、接続が切れる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Amazon WorkSpacesのRemember Me機能を使う</title>
      <link>http://aimless.jp/blog/archives/2015-12-15-aws-workspaces-with-remember-me</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2015-12-15-aws-workspaces-with-remember-me</guid>
      <description>

&lt;p&gt;Amazon WorkSpacesへの憧れが止まりません。BYOD＋WorkSpacesで仕事がしたい。とはいえ、古きSIerである弊社において、いきなりBYODはレベルが高すぎます。そこで、自宅からのリモートアクセス用途として会社に対してWorkSpacesを提案することにしました。そのために色々と調べたのでメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;mfaの罠:31f38dca8007ccf1ee688b8fda274f87&#34;&gt;MFAの罠&lt;/h2&gt;

&lt;p&gt;AD ConnectorとRADIUSサーバによる多要素認証を使ってみて気が付いたのですが、WorkSpacesクライアントは多要素認証を使っていても認証情報を記憶します。多要素認証でログインした後に一旦切断しても、以下の画面になりボタン一つで簡単に再接続ができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.amazonwebservices.com/blog/2015/ws_client_reconnect_2.png&#34; alt=&#34;https://media.amazonwebservices.com/blog/2015/ws_client_reconnect_2.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　認証情報を保存する機能は便利なのですが、社外に配置するPCで利用するWorkSpacesクライアントには認証情報を保存したくありません。誰が触るかわかりませんので。&lt;/p&gt;

&lt;h2 id=&#34;remember-meの無効化:31f38dca8007ccf1ee688b8fda274f87&#34;&gt;Remember Meの無効化&lt;/h2&gt;

&lt;p&gt;ドキュメントを調べたところ、ぴったりな機能がありました。Remember Meの無効化です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/workspaces/latest/adminguide/osx_client_help.htm&#34;&gt;Amazon WorkSpaces クライアントのヘルプ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Amazon WorkSpaces 管理者が [Remember Me] 機能を無効にしていない場合、それ以降 WorkSpace に簡単に接続できるように、自分の認証情報を安全に保存しておくかどうかを確認するメッセージが表示されます。認証情報は、ユーザーの Kerberos チケットの最大有効期間が終了するまで安全にキャッシュに保存されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現時点で、Remember Meの無効化はサポートにお願いする必要があります。マネジメントコンソールでは無効にできません。&lt;/p&gt;

&lt;h2 id=&#34;remember-me無効後の動作:31f38dca8007ccf1ee688b8fda274f87&#34;&gt;Remember Me無効後の動作&lt;/h2&gt;

&lt;p&gt;WorkSpacesクライアントを切断します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-12-15-002.png&#34; alt=&#34;http://aimless.jp/blog/images/2015-12-15-002.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;切断後の画面がRecconectになりません。IDとパスワード、ワンタイムパスワードを入力する画面に戻りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-12-15-003.png&#34; alt=&#34;http://aimless.jp/blog/images/2015-12-15-003.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;WorkSpacesクライアントのオプション設定でもRemember Meを有効にすることができなくなります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-12-15-004.png&#34; alt=&#34;http://aimless.jp/blog/images/2015-12-15-004.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;所感:31f38dca8007ccf1ee688b8fda274f87&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;WorkSpacesはどこでもどんな端末でも使えるのが最大のメリットだと思います。ですが、どこでも使える端末に社内ネットワークにアクセスするための認証情報を保存するのはリスクがあります。Remember Meの無効化は、利便性とセキュリティを両立させる良いオプションだと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CircleCIでRedPenを動かす</title>
      <link>http://aimless.jp/blog/archives/2686</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2686</guid>
      <description>

&lt;h2 id=&#34;はじめに:fdefdb4df80f925e79defa0315e73418&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/archives/2685/&#34;&gt;RedPenにスペルチェック機能を追加する&lt;/a&gt;の続きです。CircleCI上でRedPenを動かしてみました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RedPenを利用したスペルチェックがローカル環境で動くことを確認しました。JavaScriptでチェック項目を拡張できるのがいいですね。次はスペルチェック用辞書の単語を増やした上で、CircleCI上で動作させてみようと思います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;コンテナの仕込み:fdefdb4df80f925e79defa0315e73418&#34;&gt;コンテナの仕込み&lt;/h2&gt;

&lt;p&gt;CircleCIのコンテナでRedPenを動かさなければなりません。RedPenはJava 1.8が必要なのでcircle.ymの&lt;code&gt;machine&lt;/code&gt;の箇所に追加します。また、RedPenそのものをダウンロードしなければなりませんので、&lt;code&gt;dependencies&lt;/code&gt;の箇所でアーカイブのダウンロードと展開、削除を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-circle.yml&#34;&gt;machine:
  timezone: Asia/Tokyo
  java:
    version: oraclejdk8

dependencies:
  pre:
    - wget https://github.com/RedPen-cc/RedPen/releases/download/v1.4.1/RedPen-1.4.1.tar.gz
    - tar xvf RedPen-1.4.1.tar.gz
    - rm RedPen-1.4.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テストの仕込み:fdefdb4df80f925e79defa0315e73418&#34;&gt;テストの仕込み&lt;/h2&gt;

&lt;p&gt;RedPenで独自JavaScriptを利用するためには、設定ファイルとJavaScriptファイルが必要です。せっかくなので、これらもリポジトリで管理します。ブログ用リポジトリにRedPenの設定ファイルとスペルチェック用JavaScriptを配置します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;circle.yml上でテスト方法を定義する必要があるのですが、「直近の変更が.mdファイルの時だけテストを実行する」という書き方が分かりませんでした。そこで、circle.ymlでは「直近の変更が.mdファイルの時だけテストを実行する」というスクリプトを実行することにしました。&lt;/p&gt;

&lt;p&gt;今回は以下のテストスクリプトを利用します。主に2つの作業を行っています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ブログ用リポジトリからダウンロードしたRedPenの設定ファイルと独自JavaScriptを、RedPen指定のディレクトリに移動する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;で直近の変更の差分からファイル名のみ取得し、そのファイル名が.mdであればそのファイルに対してRedPenによるテストを実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
mv RedPen/blog.xml RedPen-*/conf
mv RedPen/spellCheck.js RedPen-*/js

filename=`git diff HEAD^ HEAD --name-only`

if [[ $filename =~ .*\.md$ ]] ;then
    echo &amp;quot;start to test $filename....&amp;quot;
    RedPen-*/bin/RedPen -c RedPen-*/conf/blog.xml -f markdown $filename
else
    echo &amp;quot;$filename is not markdown. The test will not be performed.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、circle.ymlのテストの項目でスクリプトの実行を定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test:
  post:
      - chmod 744 test-redpen.sh
      - bash ./test-redpen.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;実行:fdefdb4df80f925e79defa0315e73418&#34;&gt;実行&lt;/h3&gt;

&lt;p&gt;さて、試してみます。書きかけのこのエントリをブログ用リポジトリにプッシュしてみます。slackからテスト結果の通知があるまで、艦これでもやりつつ待ちます。&lt;/p&gt;

&lt;p&gt;テストは失敗しました。RedPenのチェックによって、以下4点のエラーが出ました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;RedPenはスペルミスの可能性があります&lt;/li&gt;
&lt;li&gt;JavaScriptはスペルミスの可能性があります&lt;/li&gt;
&lt;li&gt;The length of the sentence (116) exceeds the maximum of 100. at line&lt;/li&gt;
&lt;li&gt;Found invalid Katakana end-hypen &amp;ldquo;エントリ&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;リトライ:fdefdb4df80f925e79defa0315e73418&#34;&gt;リトライ&lt;/h2&gt;

&lt;p&gt;4項目を修正しまして再プッシュしましたが、再びエラーです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The number of paragraphs exceeds the maximum of 6. at line: 実行&lt;/li&gt;
&lt;li&gt;The length of the sentence (109) exceeds the maximum of 100. at line: &amp;mdash;title: CircleCIでRedPenを動かすauthor: kongou_aelayout: postdate: 2015-11-25url: /blog/archives/2686categories:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目のエラーを見ると、1セクションあたりのパラグラフが多いことが原因のようです。そこで、文章の構成を変更しパラグラフの数を減らします。&lt;/p&gt;

&lt;p&gt;2つ目のエラーを見ると、1センテンスあたりの文字数が100を超えていることが原因のようです。しかし、怒られた箇所はHUGOの設定箇所のため、記載方法を変更できません。仕方がないので、標準の&lt;code&gt;SentenceLength&lt;/code&gt;の変則版を自前で実装します。JavaScriptによる拡張、便利。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // HUGOの設定以外のセンテンスに対して、100文字を超えているかどうかチェック
  if (sentence.content.match(/^---title.*categories:$/)){
  } else if (sentence.content.length &amp;gt; 100){
    addError(&#39;このセンテンスは100文字を超えています&#39;, sentence);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度プッシュします。無事テストが通り、エントリが公開されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/20151125-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;所感:fdefdb4df80f925e79defa0315e73418&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;CircleCIを利用して、ブログに対する継続的なテストを実装することができました。やりたいことができたので満足です。ブログを書きながら、スペルチェック用の辞書を育てていこうとおもいます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RedPenにスペルチェック機能を追加する</title>
      <link>http://aimless.jp/blog/archives/2685</link>
      <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2685</guid>
      <description>

&lt;h2 id=&#34;前置き:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;前置き&lt;/h2&gt;

&lt;p&gt;もともとこのブログはWordpressで運用していました。ですが、アウトプットすることが目的であってCMSを運用することは目的ではありませんので、HUGO + Github Pagesの構成に切り替えました。&lt;/p&gt;

&lt;p&gt;切り替えに伴い、ブログ用のGithubリポジトリにMarkdownをPushすると、CircleCIがHUGOを使ってブログをビルドし、HTMLをGithub PagesにPushする、という仕組みにしました。&lt;/p&gt;

&lt;h2 id=&#34;文章をテストする:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;文章をテストする&lt;/h2&gt;

&lt;p&gt;ブログを公開するプロセスにCircleCIがいますので、ブログの文章に対してCIを行うことがでいます。何をするか考えた結果、文章をテストすることにしました。ブログ用のGithubリポジトリにPushされたMarkdownをCircleCIでテストし、誤記や文法の誤りなどがあればテスト失敗とみなしビルドを行わない。こうすることで、ブログに誤った情報を含むエントリーが乗ってしまう可能性を減らすことができます。&lt;/p&gt;

&lt;p&gt;文章をテストするツールを探してみると、&lt;a href=&#34;https://github.com/textlint/textlint&#34;&gt;textlint/textlint&lt;/a&gt;と&lt;a href=&#34;https://github.com/redpen-cc/redpen/&#34;&gt;redpen-cc/redpen&lt;/a&gt;が見つかりました。asciidocとasciidocter-pdfを利用した気軽なドキュメント作成を模索していることもありますので、今回はasciidocをサポートするRedPenを使うことにします。&lt;/p&gt;

&lt;h2 id=&#34;実践:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;実践&lt;/h2&gt;

&lt;p&gt;UTM製品であるフォーティゲートの正しいスペルは「FortiGate」です。FortigateやFroutigateではありません。ネットワークエンジニアとして、ネットワーク機器のスペルを間違えるのは恥ずかしい。そこでRedPenに、自分が指定するキーワードを利用したスペルチェック機能を実装します。&lt;/p&gt;

&lt;p&gt;RedPenはJavaScriptを利用した機能拡張をサポートしています。「&lt;a href=&#34;http://www.clear-code.com/blog/2015/8/29.html&#34;&gt;RedPenのValidatorをJavaScript で書くには&lt;/a&gt;」を参考に、JavaScriptによる機能拡張を実装します。&lt;/p&gt;

&lt;p&gt;スペルチェックについては編集距離を利用します。編集距離を求める関数は「&lt;a href=&#34;http://lostlinksearch.net/blog/2012/12/javascript%E3%81%A7%E7%B7%A8%E9%9B%86%E8%B7%9D%E9%9B%A2%EF%BC%88%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2%EF%BC%89%E3%82%92%E8%A8%88%E7%AE%97/&#34;&gt;JavaScriptで編集距離（レーベンシュタイン距離）を計算する&lt;/a&gt;
」をそのまま使わせていただきます。&lt;/p&gt;

&lt;p&gt;以下コードの通り、RedPenが検知した名詞とスペルチェックの確認対象との編集距離を求め、0ではなく3以下であればスペルミスとみなします。編集距離を３としたのは勢いです。適当な値はこれから模索していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function validateSentence(sentence) {

  var levenshteinDistance = function(a, b) {
    var matrix = new Array(a.length + 1);
    for (var i = 0; i &amp;lt; a.length + 1; i++) {
      matrix[i] = new Array(b.length + 1);
    }

    for (var i = 0; i &amp;lt; a.length + 1; i++) {
      matrix[i][0] = i;
    }

    for (var j = 0; j &amp;lt; b.length + 1; j++) {
      matrix[0][j] = j;
    }

    for (var i = 1; i &amp;lt; a.length + 1; i++) {
      for (var j = 1; j &amp;lt; b.length + 1; j++) {
        var x = a[i - 1] == b[j -1] ? 0 : 1;
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j- 1] + x
        );
      }
    }

    return matrix[a.length][b.length];
  }


  console = {
      log: print,
      warn: print,
      error: print
  };

  var checkKeywordArray = [
    &#39;FortiGate&#39;,
    &#39;メルセデスベンツ&#39;,
    &#39;BIG-IP&#39;,
    &#39;インデックス&#39;,
    &#39;JavaScript&#39;
  ]

  for (var i = 0; i &amp;lt; sentence.tokens.length; i++) {
    // 名詞だけを対象に
    if (sentence.tokens[i].tags[0] == &#39;名詞&#39;) {
      for (var j=0; j &amp;lt; checkKeywordArray.length; j++) {
        //console.log(&#39;checking : &#39; + sentence.tokens[i].surface + &#39; and &#39; + checkKeywordArray[j])
        var dist = levenshteinDistance(sentence.tokens[i].surface,checkKeywordArray[j])        
        //console.log(sentence.tokens[i].surface +&#39; is &#39; + dist)
        if (dist &amp;lt;= 3 &amp;amp;&amp;amp; dist != 0){
          addError(sentence.tokens[i].surface + &#39;はスペルミスの可能性があります&#39;, sentence);
        }
      }
    }  
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScriptを利用したvalidatorをRedPenのコンフィグで有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat conf/redpen-conf-ja-custom.xml                                   
&amp;lt;redpen-conf lang=&amp;quot;ja&amp;quot;&amp;gt;
    &amp;lt;validators&amp;gt;
        &amp;lt;validator name=&amp;quot;SentenceLength&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;max_len&amp;quot; value=&amp;quot;100&amp;quot;/&amp;gt;
        &amp;lt;/validator&amp;gt;
        &amp;lt;validator name=&amp;quot;KatakanaEndHyphen&amp;quot;/&amp;gt;
        &amp;lt;validator name=&amp;quot;SectionLength&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;max_num&amp;quot; value=&amp;quot;1500&amp;quot;/&amp;gt;
        &amp;lt;/validator&amp;gt;
        &amp;lt;validator name=&amp;quot;ParagraphNumber&amp;quot;/&amp;gt;
        &amp;lt;validator name=&amp;quot;SuccessiveWord&amp;quot; /&amp;gt;
        &amp;lt;validator name=&amp;quot;JavaScript&amp;quot; /&amp;gt;　　
    &amp;lt;/validators&amp;gt;
&amp;lt;/redpen-conf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストするMarkdownは以下の通りです。あえて誤記をまぜます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more test.md

## どうだー

インデックスは正しいです

インデデクスは間違っています

メルセデスベンスは間違っています

メルセデスベンツは正しいです

FortiGateは正しいです

Fortigateは間違っています

Frotigateも間違っています
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストします。間違ったスペルのセンテンスだけをエラーとして検知していますね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redpen-distribution-1.4.1]$ bin/redpen -c conf/redpen-conf-ja-custom.xml -f markdown test.md
[2015-11-23 18:55:02.902][INFO ] cc.redpen.Main - Configuration file: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/redpen-conf-ja-custom.xml
[2015-11-23 18:55:02.910][INFO ] cc.redpen.ConfigurationLoader - Loading config from specified config file: &amp;quot;/home/aimless/study/document/redpen/redpen-distribution-1.4.1/conf/redpen-conf-ja-custom.xml&amp;quot;
[2015-11-23 18:55:02.921][INFO ] cc.redpen.ConfigurationLoader - Succeeded to load configuration file
[2015-11-23 18:55:02.921][INFO ] cc.redpen.ConfigurationLoader - Language is set to &amp;quot;ja&amp;quot;
[2015-11-23 18:55:02.921][WARN ] cc.redpen.ConfigurationLoader - No type configuration...
[2015-11-23 18:55:02.922][INFO ] cc.redpen.ConfigurationLoader - No &amp;quot;symbols&amp;quot; block found in the configuration
[2015-11-23 18:55:02.990][INFO ] cc.redpen.config.SymbolTable - &amp;quot;ja&amp;quot; is specified.
[2015-11-23 18:55:02.990][INFO ] cc.redpen.config.SymbolTable - &amp;quot;normal&amp;quot; type is specified
[2015-11-23 18:55:03.497][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[。, ？, ！]&amp;quot; are added as a end of sentence characters
[2015-11-23 18:55:03.498][INFO ] cc.redpen.parser.SentenceExtractor - &amp;quot;[’, ”]&amp;quot; are added as a right quotation characters
[2015-11-23 18:55:03.512][INFO ] cc.redpen.validator.Validator - max_len is set to 100
[2015-11-23 18:55:03.515][INFO ] cc.redpen.validator.Validator - max_num is set to 1500
[2015-11-23 18:55:03.516][INFO ] cc.redpen.validator.Validator - max_num is not set. Use default value of 5
[2015-11-23 18:55:03.519][INFO ] cc.redpen.validator.JavaScriptValidator - JavaScript validators directory: /home/aimless/study/document/redpen/redpen-distribution-1.4.1/js
test.md:1: ValidationError[ParagraphNumber], The number of paragraphs exceeds the maximum of 7. at line: どうだー
test.md:5: ValidationError[JavaScript], [spellcheck.js] インデデクスはスペルミスの可能性があります at line: インデデクスは間違っています
test.md:7: ValidationError[JavaScript], [spellcheck.js] メルセデスベンスはスペルミスの可能性があります at line: メルセデスベンスは間違っています
test.md:13: ValidationError[JavaScript], [spellcheck.js] Fortigateはスペルミスの可能性があります at line: Fortigateは間違っています
test.md:15: ValidationError[JavaScript], [spellcheck.js] Frotigateはスペルミスの可能性があります at line: Frotigateも間違っています

[2015-11-23 18:55:04.483][ERROR] cc.redpen.Main - The number of errors &amp;quot;5&amp;quot; is larger than specified (limit is &amp;quot;1&amp;quot;).
[aimless@dev redpen-distribution-1.4.1]$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感:6a8429973c6a1dee2b4aa041f6e841a8&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;RedPenを利用したスペルチェックがローカル環境で動くことを確認しました。JavaScriptでチェック項目を拡張できるのがいいですね。次はスペルチェック用辞書の単語を増やした上で、CircleCI上で動作させてみようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aws2excelを作ってみた</title>
      <link>http://aimless.jp/blog/archives/2684</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2684</guid>
      <description>

&lt;h2 id=&#34;作ったもの:d4fd824ade6bd5facb61487e58730a29&#34;&gt;作ったもの&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kongou-ae/aws2excel&#34;&gt;kongou-ae/aws2excel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWSの構成情報をxlsxファイルに書き出すスクリプトです。出力されるファイルのイメージはREADMEの画像を参照ください。勢いでやっつけているので、一部サービスにのみ対応しています。最終的にはLambdaで動かしてs3にExcelを吐き出す実装にしたい。&lt;/p&gt;

&lt;h2 id=&#34;経緯:d4fd824ade6bd5facb61487e58730a29&#34;&gt;経緯&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/ishikawa84g&#34;&gt;@ishikawa84g&lt;/a&gt; cloud2excel!&lt;/p&gt;&amp;mdash; 前佛 雅人(M.Zembutsu) (@zembutsu) &lt;a href=&#34;https://twitter.com/zembutsu/status/660383609283457024&#34;&gt;2015, 10月 31&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/ishikawa84g&#34;&gt;@ishikawa84g&lt;/a&gt; 残念ながら夢の中のお話です…&lt;/p&gt;&amp;mdash; 前佛 雅人(M.Zembutsu) (@zembutsu) &lt;a href=&#34;https://twitter.com/zembutsu/status/660384559700176896&#34;&gt;2015, 10月 31&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/ishikawa84g&#34;&gt;@ishikawa84g&lt;/a&gt; ごめんなさい…ごめんなさいｗ&lt;/p&gt;&amp;mdash; 前佛 雅人(M.Zembutsu) (@zembutsu) &lt;a href=&#34;https://twitter.com/zembutsu/status/660384991096868865&#34;&gt;2015, 10月 31&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;自分もワクワクしながらcloud2excelを検索しまして、、、無いのであれば、勉強がてら作ってみようということで作ってみました。&lt;/p&gt;

&lt;h2 id=&#34;実装:d4fd824ade6bd5facb61487e58730a29&#34;&gt;実装&lt;/h2&gt;

&lt;p&gt;aws-sdkを利用してAPIを叩き必要な情報を取得し、その情報をExcel に書き出しているだけです。Excelへの書き出しは&lt;a href=&#34;https://github.com/guyonroche/exceljs&#34;&gt;guyonroche/exceljs&lt;/a&gt;を使いました。&lt;/p&gt;

&lt;h2 id=&#34;雑感:d4fd824ade6bd5facb61487e58730a29&#34;&gt;雑感&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/guyonroche/exceljs&#34;&gt;guyonroche/exceljs&lt;/a&gt;を見つけたのが今回の最大の収穫です。配列やオブジェクトの情報を、かなり簡単に表形式でExcelに書き出すことができます。さらに、&lt;a href=&#34;https://github.com/guyonroche/exceljs&#34;&gt;guyonroche/exceljs&lt;/a&gt;は、Excelからの読み込みもできるようなので、Infrastrucrture as Excelが実現できます。Excelでパラメータシートを作り、そこにパラメータを書くとAWS上にインスタンスができる。なんという黒魔術。やりませんけど。。。&lt;/p&gt;

&lt;p&gt;また、Node.jsの非同期処理に苦戦しました。async.jsを使っており期待する動作はしているものの、正しい使い方かどうか不安です。Node.js（というかJavascript）を体系的に学びたい。&lt;/p&gt;

&lt;p&gt;今後は、issueにもある通り、コードを分割してメンテナンス性を高め、ELBやRDSなどメジャーなサービスに対応しようと思います。仕事の本業はAWSではないので、プライベートで淡々とメンテしていきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>リーダーな私が意識している事</title>
      <link>http://aimless.jp/blog/archives/2683</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2683</guid>
      <description>

&lt;p&gt;リーダと呼ばれるポジションに就き、5名のメンバーと一緒に仕事を行うこと3年、ふと「昔と比べると丸くなったなー」と思ったので、今意識している事をメモしておきます。社内研修や書籍、聖杯問答など、人を導くということについて色々な角度で学んだことを自分なりに消化した結果です。実際にできていることもあれば、中々できないこともあるので、今一度意識しなおして、半年くらい経ったら見返したい。&lt;/p&gt;

&lt;h2 id=&#34;信じて任せる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;信じて任せる&lt;/h2&gt;

&lt;p&gt;大原則として、メンバーを信じることにしています。また、メンバーを信じているということを、心の中で思っているだけでなくメンバーの前で明言します。「信じてるよ」と。メンバーを信じでいますので、能動的に仕事を回しているメンバーに対しては、仕事の細部に口を出すことはしません。信じて任せます。&lt;/p&gt;

&lt;h2 id=&#34;放置しない:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;放置しない&lt;/h2&gt;

&lt;p&gt;信じると放置するは違うと考えています。リーダである私は、チームとして与えられたミッションをクリアすることで評価されます。そのためには、自分のメンバーが成果を出すことが必要不可欠です。チームに与えられているミッションは、自分の力だけで解決できる量をとうに超えています。従って、信じていると宣言する一方で、メンバーの成果が出ていることを確認し、必要に応じて軌道修正を行うことを意識しています。&lt;/p&gt;

&lt;p&gt;例えば、週次ミーティングでの進捗報告や、メーリングリストに流れるメンバーのメールでのやりとりで、メンバーのアウトプットの有無や質を確認し、期待する成果に届いていない場合は声をかけます。困っているようであれば自分の仕事を止めて助け、悩んでいるようであれば一緒に悩みます。すべての変更作業について、私の承認が必要なプロセスにしているのも、放置しないの一環です。信じているし任せますが、最終的な責任まで放棄する気はありません。&lt;/p&gt;

&lt;h2 id=&#34;メンバーに決めさせる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;メンバーに決めさせる&lt;/h2&gt;

&lt;p&gt;リーダになった当初、リーダの仕事は決める事だと思っていましたが、何から何まで決めるのは止めました。特に、メンバーのタスクであれば、メンバーに決めてもらうことにしています。決められないのであれば、メンバーの悩みや迷いを聴いた上で、整理した上で再提示し、解決へのヒントを与える。こんな地味な事を繰り返し、メンバーに決めてもらう事を意識しています。&lt;/p&gt;

&lt;p&gt;当然、自分でも決められますし、自分で決めて指示したほうが早いこともあります。ですが、メンバーが自分で決められることを私が決めるということは、メンバーの力を疑っているということだと思います。前述した信じるというポリシーにも反します。また、何から何まで自分が決めていると、自分がチームのボトルネックになってしまい、チームとして与えられたミッションを達成できなくなってしまいます。ですから、信じるメンバーに悩んでもらい決めてもらうことにしました。&lt;/p&gt;

&lt;p&gt;一方で、メンバーが悩んでどうしても決められない場合や、チームとしての決断が必要な場合は、即判断します。リーダですから。&lt;/p&gt;

&lt;h2 id=&#34;ほめる:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;ほめる&lt;/h2&gt;

&lt;p&gt;仕事だからやって当然という考えは捨てました。仕事はツライ。だからこそ、頑張ってくれたメンバーはしっかり褒める。メールだけでなく、言葉で、他のメンバーのいる場で褒めます。「さすが」「完璧」といった簡易な言葉でも構わないので、ほめることを意識しています。&lt;/p&gt;

&lt;p&gt;作業直前で手順の誤りに気がついた部下が相談に来たら、皆さんはどうしますか。「何やってんの、、」と怒りを示していませんか？私は褒めます。「作業する前に気がついてよかったじゃん。よく気がついたよ。ありがとね」と。怒っても仕方ない。&lt;/p&gt;

&lt;h2 id=&#34;感情を表に出す:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;感情を表に出す&lt;/h2&gt;

&lt;p&gt;あえて感情を表に出すことにしています。私が人間臭い人が好きだからです。ただし、自分の負の感情は除く。負の感情はメンバーのいないところで発散します。&lt;/p&gt;

&lt;p&gt;成果を出してくれたメンバーには、その成果を一緒に喜び、感謝します。メールだけでなく、言葉で。深夜作業や厳しい仕事を成し遂げたメンバーには、「無事終わってうれしい。ありがとう」と喜びと感謝を。&lt;/p&gt;

&lt;p&gt;チーム外から理不尽な扱いを受けているメンバーがいれば、その怒りは私が代わりに声を上げることにしています。仕事だからといって理不尽が許されるわけではない。そうはいってもメンバーは言いにくいでしょうから、私が代わりに怒りの声を上げることで、メンバーの気持ちを少しでも軽くできればと思ってやっています。&lt;/p&gt;

&lt;p&gt;しょうもない雑談と笑いも大事にしています。仕事の合間の雑談、楽しいでしょ。こういうの大事。&lt;/p&gt;

&lt;h2 id=&#34;やり方ではなくゴールを指示する:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;やり方ではなくゴールを指示する&lt;/h2&gt;

&lt;p&gt;仕事の細かいやり方を指示することはやめました。やり方はメンバーでも考えられるのですから（むしろメンバーの方が詳細に考えらえる事の方が多い）、やり方ではなく、私が期待する成果のあり姿を明確に伝える事を意識しています。「この仕事をお願いします。こーやって、あーやって、こうやってください」ではなく「この仕事をお願いします。成果物はこんなイメージ」であったり「この仕事をお願いします。○○できるようにするのがゴール」といったイメージです。&lt;/p&gt;

&lt;h2 id=&#34;門戸を開く:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;門戸を開く&lt;/h2&gt;

&lt;p&gt;「何かあったら相談してね」「出かけるけど、何かあったら携帯ならしてね」は口癖になりました。明言することで、相談や緊急時の連絡が増えたような気がしています。相談や緊急連絡が増えると自分の仕事は止まりますが、リーダというものは、こういうものだと割り切ることにしました。チームとして成果が出ればいいよ。ゆえに、リーダ以外の業務は、メンバーが退社した17時以降が本番です。&lt;/p&gt;

&lt;h2 id=&#34;チームである事を口にし続ける:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;チームである事を口にし続ける&lt;/h2&gt;

&lt;p&gt;自分とメンバーの事を「○○チーム」と呼ぶことを意識しています。私たちは個ではなくチームであること、つまり仲間であることを自分とメンバーに意識づけられればと思ってあえて言い続けています。最大の効果は、自分がチームのリーダであることを常に自分に意識づけし続けられることかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;最後に:cfff3a3a77bc1035e507c0bd778c73d2&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;　リーダーって何なんだろうなー。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon LinuxにZabbix3.0をインストールしてハマった事</title>
      <link>http://aimless.jp/blog/archives/2682</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2682</guid>
      <description>

&lt;p&gt;Zabbix3.0（アルファ版）のソースが公開されていたので、Amazon Linuxにインストールを試みました。その際にはまったことをメモしておきます。ハマったといっても、マニュアルのRequirementsを読んでからインストールを始めれば、全くハマらないポイントです。。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zabbix.com/documentation/3.0/&#34;&gt;Zabbix Documentation 3.0&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Linuxのバージョン：2015.09&lt;/li&gt;
&lt;li&gt;Zabbixのバージョン：3.0.0 alpha3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サポートするphpのバージョンが5-4-0以上である:36b14705263dd1ce094510eba4cf7e4c&#34;&gt;サポートするPHPのバージョンが5.4.0以上である&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-26-001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　Amazon Linuxで何も考えずに&lt;code&gt;sudo yum install php php-gd php-bcmath php-mysql php-mbstring&lt;/code&gt;すると、インストールされるPHPのバージョンは5.3になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;============================================================================================================================
 Package                       Arch                    Version                             Repository                  Size
============================================================================================================================
Installing:
 php                           x86_64                  5.3.29-1.8.amzn1                    amzn-main                  2.8 M
 php-bcmath                    x86_64                  5.3.29-1.8.amzn1                    amzn-main                   52 k
 php-gd                        x86_64                  5.3.29-1.8.amzn1                    amzn-main                  219 k
 php-mbstring                  x86_64                  5.3.29-1.8.amzn1                    amzn-main                  2.3 M
 php-mysql                     x86_64                  5.3.29-1.8.amzn1                    amzn-main                  178 k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　Zabbix3.0は、php5.3をサポートしていません。php5.4以上をサポートしています。&lt;code&gt;sudo yum install php54 php54-gd php54-bcmath php54-mysql php54-mbstring&lt;/code&gt;でphp5.4をインストールするようにしましょう。&lt;/p&gt;

&lt;h2 id=&#34;php5-4がapache2-4系に依存している:36b14705263dd1ce094510eba4cf7e4c&#34;&gt;php5.4がapache2.4系に依存している&lt;/h2&gt;

&lt;p&gt;　apache2.2がインストールされている場合、php5.3をyum removeし、いざphp5.4系をyum installしようとしても、依存エラーになります。&lt;/p&gt;

&lt;p&gt;　これはphp5.4がapache2.4に依存しているためです。php5.4が必要とするapache2.4が、元々入っているapache2.2と競合してしまうためにエラーとなります。apache2.2系のパッケージを削除してからphp54のインストールを行いましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install php54 php54-gd php54-bcmath php54-mysql php54-mbstring
Loaded plugins: priorities, update-motd, upgrade-helper
Resolving Dependencies
--&amp;gt; Running transaction check
---&amp;gt; Package php54.x86_64 0:5.4.45-1.75.amzn1 will be installed
--&amp;gt; Processing Dependency: httpd-mmn = 20120211x86-64 for package: php54-5.4.45-1.75.amzn1.x86_64
--&amp;gt; Processing Dependency: php54-common(x86-64) = 5.4.45-1.75.amzn1 for package: php54-5.4.45-1.75.amzn1.x86_64
--&amp;gt; Processing Dependency: php54-cli(x86-64) = 5.4.45-1.75.amzn1 for package: php54-5.4.45-1.75.amzn1.x86_64
--&amp;gt; Processing Dependency: httpd24 for package: php54-5.4.45-1.75.amzn1.x86_64
（中略）
--&amp;gt; Finished Dependency Resolution
Error: httpd24-tools conflicts with httpd-tools-2.2.31-1.6.amzn1.x86_64
Error: httpd24 conflicts with httpd-2.2.31-1.6.amzn1.x86_64
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lambdaファンクションを雑に監視する</title>
      <link>http://aimless.jp/blog/archives/2681</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2681</guid>
      <description>

&lt;h2 id=&#34;lambdaへの切り替え:6d0ff38d6f824570d13427bb9cb52ec6&#34;&gt;Lambdaへの切り替え&lt;/h2&gt;

&lt;p&gt;　Lambdaがスケジュール実行に対応しました。そこで、サーバレスアーキテクチャを実践すべく、conohaで動いている＠ipv6kumaの機能を、AWSに順次お引越ししています。本日時点で、以下のフルルート数とフルルートグラフのツイートはLambdaでお伝えしています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;2015/10/25の経路数は24457だクマー。昨日と比べて35経路増えたクマ！！ /from Lambda&lt;/p&gt;&amp;mdash; ブイロクマ (@IPv6kuma) &lt;a href=&#34;https://twitter.com/IPv6kuma/status/658221773335334912&#34;&gt;2015, 10月 25&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日までの経路数をグラフにしたクマ!! &lt;a href=&#34;https://t.co/Z9jHt6yXnT&#34;&gt;https://t.co/Z9jHt6yXnT&lt;/a&gt;&lt;/p&gt;&amp;mdash; ブイロクマ (@IPv6kuma) &lt;a href=&#34;https://twitter.com/IPv6kuma/status/658221776074244097&#34;&gt;2015, 10月 25&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;lambdaを監視する:6d0ff38d6f824570d13427bb9cb52ec6&#34;&gt;Lambdaを監視する&lt;/h2&gt;

&lt;p&gt;　さて、Lambdaファンクションを書いていて気になった事があります。それは『Lambdaファンクションが正しく動作している事をどうやって監視するか』です。&lt;/p&gt;

&lt;p&gt;　現時点での＠ipv6kumaは、エラーハンドリングを書いていません。想定通りに動作した最後の箇所に&lt;code&gt;context.done()&lt;/code&gt;を記載しているだけです。したがって、エラーが起きると&lt;code&gt;context.done()&lt;/code&gt;が呼び出されないので、ログには必ず&lt;code&gt;Process exited before completing request&lt;/code&gt;が出現します。&lt;/p&gt;

&lt;p&gt;　そこで、この文言をcloudwatch logsのMetric Filterを利用して監視することで、Lambdaファンクションが想定通りに動いているかどうかを監視することにしました。&lt;/p&gt;

&lt;h2 id=&#34;設定方法:6d0ff38d6f824570d13427bb9cb52ec6&#34;&gt;設定方法&lt;/h2&gt;

&lt;p&gt;　監視したいログを選択し、&lt;code&gt;Create Metric Filter&lt;/code&gt;を選択。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　&lt;code&gt;Filter Pattern&lt;/code&gt;に&lt;code&gt;Process exited before completing request&lt;/code&gt;を入力して次に進む&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　&lt;code&gt;Metric Name&lt;/code&gt;の欄に、カスタムメトリック名を入力し&lt;code&gt;Save Filter&lt;/code&gt;を押下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　メトリックフィルターができました。このフィルターに紐づくアラームを作成します。&lt;code&gt;Create Alarm&lt;/code&gt;を押下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　必要なパラメータを入力します。Metric Filter作成時にMetricを1にしましたので、アラームの閾値は1以上とします。ActionにSNSを通知することで、エラーの発生をメールで通知します。ipv6kuma_errorのサブスクライバーは私の個人アドレスになっています。&lt;/p&gt;

&lt;p&gt;　最後に&lt;code&gt;Create Alarm&lt;/code&gt;を押下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　アラームつきのMetric Filterができました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;動作確認:6d0ff38d6f824570d13427bb9cb52ec6&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;　@ipv6kumaはエラーを起こすのが大変なので、別のLambdaファンクションに同様の監視を実装して、&lt;code&gt;Process exited before completing request&lt;/code&gt;を発生させました。&lt;/p&gt;

&lt;p&gt;　少々待つと、CloudwatchのエラーがSNS経由で通知されました。これで@ipv6kumaに何かあった場合、気が付くことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/images/2015-10-25-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ソフトバンクショップでiPhone 6s Plusに機種変更したら、5137円/月のオプションが付いた</title>
      <link>http://aimless.jp/blog/archives/2680</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2680</guid>
      <description>

&lt;p&gt;iPhone 6s Plusに機種変更しました。画面が大きいのはいいことです。&lt;/p&gt;

&lt;p&gt;　さて、&lt;a href=&#34;http://akimotoshoji.blog.jp/archives/51481475.html&#34;&gt;iPhone6sの機種変で、ソフトバンクに3500円/月のオプション加入を迫られたwww&lt;/a&gt;を見て、「そういえば私もかなりのオプションサービスに加入したなぁ」と思ったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;加入したオプション一覧:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;加入したオプション一覧&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;サービス名&lt;/th&gt;
&lt;th&gt;月額料金&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;あんしん保証パックプラス&lt;/td&gt;
&lt;td&gt;￥702&lt;/td&gt;
&lt;td&gt;機種変更前も契約。機種変更後も利用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;基本パック&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;機種変更前も契約。機種変更後も利用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;機種変更先取りプログラム&lt;/td&gt;
&lt;td&gt;￥324&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;オススメコンテンツ&lt;/td&gt;
&lt;td&gt;￥324&lt;/td&gt;
&lt;td&gt;ことりっぷ、ライフレンジャー、music.jpのパック&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;とく放題（m）&lt;/td&gt;
&lt;td&gt;￥637&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;UULA&lt;/td&gt;
&lt;td&gt;￥504&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;アニメ放題&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ブック放題&lt;/td&gt;
&lt;td&gt;￥540&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NETFLIX&lt;/td&gt;
&lt;td&gt;￥1026&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　さらに、速度維持の仕組みが「制限モード」から「快適モード」に変更になりました。「快適モード」だと、「3日で1Gバイト」の制限に引っかかった場合に、￥2500/2Gの権利が自動的に購入されます。つまり、この現代においてパケ死するモードです。&lt;/p&gt;

&lt;h2 id=&#34;対応:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;対応&lt;/h2&gt;

&lt;p&gt;　契約時に不要なオプションがつくのは儀式だと思っているので、お店の方と「今日家に帰ってすぐに全部解約してもいいんですよね？」「お店としては10月1日以降だとありがたいのですが・・・」というやり取りをしたうえで、不要なオプションは全部解約＆速度維持を制限モードに変更しました。&lt;/p&gt;

&lt;p&gt;　解約の手続きをお客様センターのオペレータさんにお願いしようと思ったのですが、オペレータさんの対応時間が20時までであり、帰宅したのが20時を過ぎていたため、MySoftbankで手続きを行いました。大変でした。&lt;/p&gt;

&lt;p&gt;　唯一、NETFLIXだけが、解約手続きをしたはずなのに、My Softbankのオプションサービス一覧に居続けています。これは、NETFLIXの契約が請求期間の最終日にキャンセルになる関係だと信じたい。&lt;/p&gt;

&lt;h2 id=&#34;感想:ce8ce68010b7d182bf86a7b0486be8f5&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;　お店の方は「いらなければ全部変更してくださいね」「（説明資料をマーキングしたうえで）これを外してくださいね」ときちんと説明してくれました。また、説明資料にはオプションサービスの解約方法がしっかり書いてありました。そのため、いらいないサービスを押し付けられたにも関わらず、お店の印象は悪くないという不思議。気持ちよく儀式を終えることができました。&lt;/p&gt;

&lt;p&gt;　「100発撃てば1発はあたる」と思ってやっているんでしょうが、この儀式、いったい誰の指示なんでしょうね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>API Gateway &#43; Lambdaを使って、マルチクラウド管理APIを作る</title>
      <link>http://aimless.jp/blog/archives/2679</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2679</guid>
      <description>&lt;p&gt;「単一のREST APIで複数のクラウドを操作できたら便利だろうなー」と思い調べてみたところ、以下のようなライブラリを見つけました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語&lt;/th&gt;
&lt;th&gt;ライブラリ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;DeltaCloud&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;libcloud&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;pkgcloud&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Golang&lt;/td&gt;
&lt;td&gt;Gophercloud&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　ライブラリによってサポートするクラウドプロバイダーが異なり、さらに管理できるサービスと管理できないサービスがあります。どれか一つのライブラリと心中するのは、少々リスクだと思いました。&lt;/p&gt;

&lt;p&gt;　「何か他にいい方法はないかなー」と調べていたところに、Amazon API Gatewayがリリースされました。API Gatewayを利用すると、API Gateway経由でLambdaを実行することができます。LambdaではNode.jsとjavaが動きます。主要なクラウドにはNode.jsやjavaのSDKが存在します。つまり、API Gatewayを利用すれば、自分のやりたいことができる、マルチクラウド管理APIを作れそうな気がしました。&lt;/p&gt;

&lt;p&gt;　というわけで実践。AzureとAWSのインスタンス情報をまとめて返すAPIを作ってみます。&lt;/p&gt;

&lt;p&gt;　API Gatewayでは、/computeがGETされた場合にLambdaファンクションを発火するようにします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/api_gateway_setting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　そして、対応するLambdaファンクションでは以下のコードを動かします。SDKを利用して各クラウドのインスタンス情報を取得し配列に格納し、その配列を返すスクリプトです。&lt;/p&gt;

&lt;p&gt;　とりあえずということで、認証情報の扱いは適当です。AWSの認証情報はコード内にベタ書きします。Azureの証明書は、lambdaファンクションのZIPに含めます。実際のところは、API Gatewayにアクセスする際のHTTPヘッダに認証情報を含め、Lambdaファンクションに渡す方法がカッコいいと思います。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/ad0b1366da2ee5efbbaa.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;　ブラウザでAPI Gatewayの/computeにアクセスすると、以下のJSONが返ってきます。AzureとAWSのインスタンス情報が一つのJSONのレスポンスになっています。いい感じですね。このレスポンスをJavascriptでいい感じに表示するHTMLを作ってS3に配置すれば、サーバレスのマルチクラウド管理ポータルが作れるかも？&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kongou-ae/825a49a087311e0814ad.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/result_of_api.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails4でRedmine CORSを使う</title>
      <link>http://aimless.jp/blog/archives/2669</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2669</guid>
      <description>

&lt;h2 id=&#34;やりたいこと:273ca993f084584514ef76dff312aa4b&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;　Cross-Origin Resource SharingでRedmineのデータを取得する&lt;/p&gt;

&lt;h2 id=&#34;実現方法:273ca993f084584514ef76dff312aa4b&#34;&gt;実現方法&lt;/h2&gt;

&lt;p&gt;　&lt;a href=&#34;https://github.com/mavimo/redmine_cors&#34;&gt;Redmine CORS&lt;/a&gt;を使い、RedmineをCORSに対応させる&lt;/p&gt;

&lt;h2 id=&#34;やってみたこと:273ca993f084584514ef76dff312aa4b&#34;&gt;やってみたこと&lt;/h2&gt;

&lt;p&gt;　READMEに記載されている方法でやってみたところ、以下の環境では動作しませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Environment:
  Redmine version                3.1.0.devel
  Ruby version                   2.2.2-p95 (2015-04-13) [x86_64-linux]
  Rails version                  4.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　具体的にはプラグインのマイグレーション時に以下のエラーメッセージが出ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mogok rake redmine:plugins:migrate                   
Running &amp;#039;rake redmine:plugins:migrate&amp;#039;...
2015-07-07T20:56:44+09:00 console[app3014.29]: An error occurred while loading the routes definition of redmine_cors plugin (/app/plugins/redmine_cors/config/routes.rb): You should not use the `match` method in your router without specifying an HTTP method.
2015-07-07T20:56:44+09:00 console[app3014.29]: If you want to expose your action to both GET and POST, add `via: [:get, :post]` option.
2015-07-07T20:56:44+09:00 console[app3014.29]: If you want to expose your action to GET, use `get` in the router:
2015-07-07T20:56:44+09:00 console[app3014.29]:   Instead of: match &#34;controller#action&#34;
2015-07-07T20:56:44+09:00 console[app3014.29]:   Do: get &#34;controller#action&#34;.
&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　エラーメッセージに言われるがまま、以下の箇所のmatchをgetにかえると、プラグインのマイグレーションは成功します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more plugins/redmine_cors/config/routes.rb 
RedmineApp::Application.routes.draw do
  match &amp;#039;*path&amp;#039;, :to =&amp;gt; &amp;#039;cors#preflight&amp;#039;, :constraints =&amp;gt; {:method =&amp;gt; &amp;#039;OPTIONS&amp;#039;}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　ただし、ルーティングがないというエラーメッセージが出て、結局動作しません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-07-07T20:00:46+09:00 app[app3012.03]: ActionController::RoutingError (No route matches [OPTIONS] &#34;/users/current.json&#34;):
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/actionpack-4.2.3/lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/actionpack-4.2.3/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/rack/logger.rb:38:in `call_app&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/rack/logger.rb:20:in `block in call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/activesupport-4.2.3/lib/active_support/tagged_logging.rb:68:in `block in tagged&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/activesupport-4.2.3/lib/active_support/tagged_logging.rb:26:in `tagged&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/activesupport-4.2.3/lib/active_support/tagged_logging.rb:68:in `tagged&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/rack/logger.rb:20:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/actionpack-4.2.3/lib/action_dispatch/middleware/request_id.rb:21:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/rack-1.6.4/lib/rack/methodoverride.rb:22:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/rack-1.6.4/lib/rack/runtime.rb:18:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/activesupport-4.2.3/lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/actionpack-4.2.3/lib/action_dispatch/middleware/static.rb:116:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/rack-1.6.4/lib/rack/sendfile.rb:113:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/engine.rb:518:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/application.rb:165:in `call&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/railtie.rb:194:in `public_send&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   .bundle/gems/ruby/2.2.0/gems/railties-4.2.3/lib/rails/railtie.rb:194:in `method_missing&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/connection.rb:86:in `block in pre_process&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/connection.rb:84:in `catch&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/connection.rb:84:in `pre_process&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/connection.rb:53:in `process&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/connection.rb:39:in `receive_data&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/eventmachine.rb:187:in `run_machine&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/eventmachine.rb:187:in `run&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/backends/base.rb:73:in `start&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/server.rb:162:in `start&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/controllers/controller.rb:87:in `start&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/runner.rb:199:in `run_command&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2.2-1/lib/ruby/site_ruby/2.2.0/thin/runner.rb:155:in `run!&amp;#039;
2015-07-07T20:00:46+09:00 app[app3012.03]:   /opt/ruby-2.2/bin/thin:6:in `&amp;lt;main&amp;gt;&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;対応策:273ca993f084584514ef76dff312aa4b&#34;&gt;対応策&lt;/h2&gt;

&lt;p&gt;　プラグインのroutes.rbを正しく書き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more plugins/redmine_cors/config/routes.rb 
RedmineApp::Application.routes.draw do
  match &amp;#039;*path&amp;#039;, :to =&amp;gt; &amp;#039;cors#preflight&amp;#039;, via: :options
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　なお、書き換えた後に気が付いたのですが、Redmine CORSをRedmine3.0で動作させるためのプルリクエストが出てますね。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>asciidocをPDFに変換してみた（asciidoctor-pdf）</title>
      <link>http://aimless.jp/blog/archives/2641</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2641</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://aimless.jp/blog/blog/archives/2506&#34;&gt;気軽にドキュメントを書く&lt;/a&gt;シリーズです。&lt;/p&gt;

&lt;p&gt;asciidocで書き、asciidoctor-pdfでさくっとPDFにするというソリューションがあるようなので試行錯誤を繰り返した結果、&lt;a href=&#34;https://gist.githubusercontent.com/kongou-ae/a3df7fb5aedf644acd72/raw/3227df201731519db0974813c1ff1f49dff19cc3/README.adoc&#34;&gt;この.adoc&lt;/a&gt;を&lt;a href=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/README.pdf&#34;&gt;このPDF&lt;/a&gt;に変換できるようになりました。&lt;/p&gt;

&lt;p&gt;使い方ではまった箇所をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;githubのREADMEに書いてある通り、gemでインストールするだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install --pre asciidoctor-pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デフォルトのテーマでpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;デフォルトのテーマでPDFに変換する&lt;/h2&gt;

&lt;p&gt;asciidoctor-pdfコマンドを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ asciidoctor-pdf basic-example.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自作テーマを利用してpdfに変換する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;自作テーマを利用してPDFに変換する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc&#34;&gt;Asciidoctor PDF Theming Guide&lt;/a&gt;に記載されている通り、自分なりのテーマを作ることができます。テーマを自作するにあたっては、&lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/data/themes/default-theme.yml&#34;&gt;デフォルトテーマ&lt;/a&gt;の記載内容が参考になります。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://gist.github.com/kongou-ae/46291f86c53d959271a7&#34;&gt;basic-theme.yml&lt;/a&gt;を作りました。ファイルはresources/themes配下に配置されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自作テーマを利用するためには、asciidoctor-pdfコマンドの-aオプションで、pdf-stylesdirとpdf-styleを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ページ番号を振る:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ページ番号を振る&lt;/h2&gt;

&lt;p&gt;ヘッダーとフッターにページ番号を振ることができます。今回は、.adocに:pagenums:を設定した上で、テーマファイルにページ番号の具体的なスタイルを記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ more README.adoc                                                                                   
= ほげほげサービス仕様書
ほげほげ株式会社 &amp;lt;doc.writer@example.jp&amp;gt;
v1.0, 2014-01-01
:toc:
:toc-title: 目次
:figure-caption: 図
:table-caption: 表
:toclevels: 2
:pagenums:
:sectnums:
:imagesdir: resources/images/


== はじめに

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はフッターの真ん中にページ番号を表示してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;footer:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [3mm,0,0,0]
  valign: top
  recto_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
  verso_content:
    center: &amp;#039;{page-number} / {page-count}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにフッターにページ番号が表示されます。今回はフッターにページ番号を付与しましたが、ヘッダーに付与することも可能です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_page_number.png&#34; alt=&#34;フッタ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ヘッダーやフッターに画像を追加する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;ヘッダーやフッターに画像を追加する&lt;/h2&gt;

&lt;p&gt;ヘッダーやフッターに画像を追加することが可能です。まずは。追加したい画像をテーマと同じディレクトリに配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、以下の様に設定します。今回はrecto_content_rightに画像を表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header:
  font_size: $base_font_size_small
  font_color: $base_font_color
  border_color: dddddd
  border_width: 0.25
  height: 25mm
  padding: [0,0,3mm,0]
  valign: bottom
  image_valign: 50
  recto_content:
    left: &amp;#039;{document-title}&amp;#039;
    right: image:header-img-10mm.png[width=&#34;75&#34;]
  verso_content:
    left: &amp;#039;{document-title}&amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヘッダの右に画像が表示されました。ただしverso_content_rightにはimageを指定していないので、右ページには画像が出ますが、左ページには画像が出ません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/07/asciidoctor_header_image.png&#34; alt=&#34;ヘッダーに画像&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;フォントを指定する:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;フォントを指定する&lt;/h2&gt;

&lt;p&gt;デフォルトでは以下3種類のフォントが利用可能です。これら以外のフォントを利用することも可能です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NotoSerif&lt;/li&gt;
&lt;li&gt;Mplus1mn&lt;/li&gt;
&lt;li&gt;Mplus1pMultilingual&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mplus1pMultilingual　にはboldがないので、migmix-1pを利用してみましょう。&lt;/p&gt;

&lt;p&gt;今回はresources/fonts配下にフォントを配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree                                                                                   
.
|-- build.sh
|-- README.adoc
|-- README.pdf
|-- README.pdfmarks
`-- resources
    |-- fonts
    |   `-- migmix-1p
    |       |-- ipag00303
    |       |   |-- IPA_Font_License_Agreement_v1.0.txt
    |       |   `-- Readme_ipag00303.txt
    |       |-- migmix-1p-bold.ttf
    |       |-- migmix-1p-regular.ttf
    |       `-- migmix-README.txt
    |-- images
    `-- themes
        |-- basic-theme.yml
        `-- header-img-10mm.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマファイルでmigmixを使うことを宣言します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font:
  catalog:
    migmix:
      normal: migmix-1p/migmix-1p-regular.ttf
      bold: migmix-1p/migmix-1p-bold.ttf
      italic: migmix-1p/migmix-1p-regular.ttf
      bold_italic: migmix-1p/migmix-1p-bold.ttf
  fallbacks:
    - migmix                                                                                                               
page:
  background_color: ffffff
  layout: portrait
  margin: [30mm, 30mm, 30mm, 30mm]
  size: A4
base:
  font_color: 000000
  font_family: migmix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;asciidoctor-pdfコマンドの-aオプションでpdf-fontsdirを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asciidoctor-pdf -a pdf-stylesdir=/resources/themes -a pdf-style=basic -a pdf-fontsdir=/resources/fonts README.adoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;所感:0276447e54b8cc1adc3ebe7f7301ea42&#34;&gt;所感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PDFは綺麗に描画された。&lt;/li&gt;
&lt;li&gt;描画に至るまでの準備が簡単&lt;/li&gt;
&lt;li&gt;テーマのスタイルファイルは独自形式なので、CSSでの装飾と比べると自由度は狭い。

&lt;ul&gt;
&lt;li&gt;たとえば、現在の私の力では、テーブルの横幅を縮めることができない。[width=&amp;#8221;50&amp;#8243;]で表の横幅が50%になるはずなのだが、PDFに表示される表の横幅は100%になってしまいまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必要最低限に装飾したPDFを作る分にはもってこいかも&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VPC FLow Logsを継続的にElasticSearchに投入する</title>
      <link>http://aimless.jp/blog/archives/2617</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://aimless.jp/blog/archives/2617</guid>
      <description>

&lt;p&gt;VPC FLow Logsのリリース直後から、クラメソさんの「&lt;a href=&#34;http://dev.classmethod.jp/cloud/aws/vpc-flow-logs-visualized-kibana4/&#34;&gt;VPC Flow LogsをElasticsearch + Kibana4で可視化する&lt;/a&gt;」と同じことを考えていました。週末に試行錯誤した結果をアウトプットします。&lt;/p&gt;

&lt;h2 id=&#34;ログの取り方:879fe74068b1e39f8423ed492442144f&#34;&gt;ログの取り方&lt;/h2&gt;

&lt;p&gt;　AWS SDK for Ruby を利用してClodWatch Logsを取得する方法は以下の様になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: utf-8

require &amp;#039;aws-sdk-core&amp;#039;

cloudwatchlogs = Aws::CloudWatchLogs::Client.new(region: region )

# cloudwatchlogs.get_log_eventsのオプションを定義
options = {
    log_group_name: log_group_name,
    log_stream_name: log_stream_name,
}

# ログを取得
resp = cloudwatchlogs.get_log_events(options)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　ただし、この方法でログを取得した場合、指定したlog_streamに格納されている大量のデータがレスポンスとして帰ってきます。デフォルトでは最大で1M Byte分のログが取得するようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/sdkforruby/api/Aws/CloudWatchLogs/Client.html#get_log_events-instance_method&#34;&gt;Class: Aws::CloudWatchLogs::Client&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, this operation returns as much log events as can fit in a response size of 1MB, up to 10,000 log events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　したがって、このコードを継続的に実行すると、最初から1M byte分のログを繰り返し取得してしまいます。これでは意味がありません。実行時には、前回実行分以降のログを取得してほしい。これを実現する方法が、&lt;code&gt;get_log_events&lt;/code&gt;の&lt;code&gt;next_token&lt;/code&gt;オプションです。&lt;/p&gt;

&lt;h2 id=&#34;増分ログの取り方:879fe74068b1e39f8423ed492442144f&#34;&gt;増分ログの取り方&lt;/h2&gt;

&lt;p&gt;　&lt;code&gt;get_log_events&lt;/code&gt;のレスポンスには&lt;code&gt;next_forward_token&lt;/code&gt;と&lt;code&gt;next_backward_token&lt;/code&gt;が含まれています。これらは取得結果の次のページの位置を示しています。より新しいログの位置は名前的に&lt;code&gt;next_forward_token&lt;/code&gt;が保持しているっぽいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/sdkforruby/api/Aws/CloudWatchLogs/Client.html#get_log_events-instance_method&#34;&gt;Class: Aws::CloudWatchLogs::Client&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;resp.events #=&amp;gt; Array&lt;/p&gt;

&lt;p&gt;resp.events[0].timestamp #=&amp;gt; Integer&lt;/p&gt;

&lt;p&gt;resp.events[0].message #=&amp;gt; String&lt;/p&gt;

&lt;p&gt;resp.events[0].ingestion_time #=&amp;gt; Integer&lt;/p&gt;

&lt;p&gt;resp.next_forward_token #=&amp;gt; String&lt;/p&gt;

&lt;p&gt;resp.next_backward_token #=&amp;gt; String&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　そこで、このtokenを利用して&lt;code&gt;get_log_events&lt;/code&gt;を実行するように、スクリプトを変更します。tokenの値は、fluentdっぽくstateファイルを作り、そこに書き込んでおきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: utf-8

require &amp;#039;aws-sdk-core&amp;#039;
require &amp;#039;fileutils&amp;#039;

region = &amp;#039;ap-northeast-1&amp;#039;
log_group_name = &amp;#039;VPCFLowLog&amp;#039;
log_stream_name = &amp;#039;eni-xxxxxxxx-all&amp;#039;
@state_file = Dir.pwd + &#34;/&#34; + log_group_name + &#34;.&#34; + log_stream_name + &#34;.state&#34;

# トークンをstateファイルに書き込む
def write_token(token)
    File.open(@state_file,&#34;w&#34;) do |file|
        file.puts(token)
    end
end

# トークンをstateファイルから読み込む
def read_token
    if File.exist?(@state_file) then
        return File.read(@state_file).chomp
    else
        return 
    end
end

cloudwatchlogs = Aws::CloudWatchLogs::Client.new(region: region )

# cloudwatchlogs.get_log_eventsのオプションを定義
options = {
    log_group_name: log_group_name,
    log_stream_name: log_stream_name,
}

# もしstateファイルから前回のtokenが取得できたら、そのtokenをオプションに追加
if read_token != nil  then
    options[:next_token] = read_token
end

# ログを取得
resp = cloudwatchlogs.get_log_events(options)

# 取得したログからtokenを保存
write_token(resp.next_forward_token)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;動作確認:879fe74068b1e39f8423ed492442144f&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;　ElasticSearchに投入済みのデータは以下の通りです。19:25:47までのログが格納されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/06/001.png&#34; alt=&#34;投入済みデータ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　&lt;code&gt;next_token&lt;/code&gt;をつけて&lt;code&gt;get_log_events&lt;/code&gt;したデータをElasticSearchに投入します。投入時のログは以下の通りです。19:28:40のデータ以降がElasticSearchに投入されていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-06-14 19:38:36 +0900: &amp;gt; {&#34;@timestamp&#34;:&#34;2015-06-14 19:28:40&#34;,&#34;version&#34;:&#34;2&#34;,&#34;account-id&#34;:&#34;250369693989&#34;,&#34;interface-id&#34;:&#34;eni-f5a92c83&#34;,&#34;srcaddr&#34;:&#34;157.7.235.92&#34;,&#34;dstaddr&#34;:&#34;10.175.10.97&#34;,&#34;srcport&#34;:&#34;123&#34;,&#34;dstport&#34;:&#34;123&#34;,&#34;protocol&#34;:&#34;17&#34;,&#34;packets&#34;:&#34;1&#34;,&#34;bytes&#34;:&#34;76&#34;,&#34;start&#34;:&#34;1434277720&#34;,&#34;end&#34;:&#34;1434277760&#34;,&#34;action&#34;:&#34;ACCEPT&#34;,&#34;log-status&#34;:&#34;OK&#34;}
2015-06-14 19:38:36 +0900: &amp;lt; {&#34;_index&#34;:&#34;aws&#34;,&#34;_type&#34;:&#34;vpcflowlog&#34;,&#34;_id&#34;:&#34;AU3xpkmyyQj6bWWoL4TA&#34;,&#34;_version&#34;:1,&#34;created&#34;:true}
2015-06-14 19:38:36 +0900: POST http://localhost:9200/aws/vpcflowlog [status:201, request:0.004s, query:n/a]
2015-06-14 19:38:36 +0900: &amp;gt; {&#34;@timestamp&#34;:&#34;2015-06-14 19:28:40&#34;,&#34;version&#34;:&#34;2&#34;,&#34;account-id&#34;:&#34;250369693989&#34;,&#34;interface-id&#34;:&#34;eni-f5a92c83&#34;,&#34;srcaddr&#34;:&#34;10.175.10.97&#34;,&#34;dstaddr&#34;:&#34;157.7.235.92&#34;,&#34;srcport&#34;:&#34;123&#34;,&#34;dstport&#34;:&#34;123&#34;,&#34;protocol&#34;:&#34;17&#34;,&#34;packets&#34;:&#34;1&#34;,&#34;bytes&#34;:&#34;76&#34;,&#34;start&#34;:&#34;1434277720&#34;,&#34;end&#34;:&#34;1434277760&#34;,&#34;action&#34;:&#34;ACCEPT&#34;,&#34;log-status&#34;:&#34;OK&#34;}
2015-06-14 19:38:36 +0900: &amp;lt; {&#34;_index&#34;:&#34;aws&#34;,&#34;_type&#34;:&#34;vpcflowlog&#34;,&#34;_id&#34;:&#34;AU3xpkm4yQj6bWWoL4TB&#34;,&#34;_version&#34;:1,&#34;created&#34;:true}
2015-06-14 19:38:36 +0900: POST http://localhost:9200/aws/vpcflowlog [status:201, request:0.003s, query:n/a]
2015-06-14 19:38:36 +0900: &amp;gt; {&#34;@timestamp&#34;:&#34;2015-06-14 19:28:40&#34;,&#34;version&#34;:&#34;2&#34;,&#34;account-id&#34;:&#34;250369693989&#34;,&#34;interface-id&#34;:&#34;eni-f5a92c83&#34;,&#34;srcaddr&#34;:&#34;162.255.180.213&#34;,&#34;dstaddr&#34;:&#34;10.175.10.97&#34;,&#34;srcport&#34;:&#34;1982&#34;,&#34;dstport&#34;:&#34;445&#34;,&#34;protocol&#34;:&#34;6&#34;,&#34;packets&#34;:&#34;2&#34;,&#34;bytes&#34;:&#34;96&#34;,&#34;start&#34;:&#34;1434277720&#34;,&#34;end&#34;:&#34;1434277760&#34;,&#34;action&#34;:&#34;REJECT&#34;,&#34;log-status&#34;:&#34;OK&#34;}
2015-06-14 19:38:36 +0900: &amp;lt; {&#34;_index&#34;:&#34;aws&#34;,&#34;_type&#34;:&#34;vpcflowlog&#34;,&#34;_id&#34;:&#34;AU3xpkm9yQj6bWWoL4TC&#34;,&#34;_version&#34;:1,&#34;created&#34;:true}
2015-06-14 19:38:36 +0900: POST http://localhost:9200/aws/vpcflowlog [status:201, request:0.003s, query:n/a]
（中略）
2015-06-14 19:38:36 +0900: &amp;gt; {&#34;@timestamp&#34;:&#34;2015-06-14 19:35:22&#34;,&#34;version&#34;:&#34;2&#34;,&#34;account-id&#34;:&#34;250369693989&#34;,&#34;interface-id&#34;:&#34;eni-f5a92c83&#34;,&#34;srcaddr&#34;:&#34;10.175.10.97&#34;,&#34;dstaddr&#34;:&#34;46.17.98.184&#34;,&#34;srcport&#34;:&#34;22&#34;,&#34;dstport&#34;:&#34;27530&#34;,&#34;protocol&#34;:&#34;6&#34;,&#34;packets&#34;:&#34;1&#34;,&#34;bytes&#34;:&#34;48&#34;,&#34;start&#34;:&#34;1434278122&#34;,&#34;end&#34;:&#34;1434278181&#34;,&#34;action&#34;:&#34;ACCEPT&#34;,&#34;log-status&#34;:&#34;OK&#34;}
2015-06-14 19:38:36 +0900: &amp;lt; {&#34;_index&#34;:&#34;aws&#34;,&#34;_type&#34;:&#34;vpcflowlog&#34;,&#34;_id&#34;:&#34;AU3xpkoQyQj6bWWoL4TY&#34;,&#34;_version&#34;:1,&#34;created&#34;:true}
2015-06-14 19:38:36 +0900: POST http://localhost:9200/aws/vpcflowlog [status:201, request:0.002s, query:n/a]
2015-06-14 19:38:36 +0900: &amp;gt; {&#34;@timestamp&#34;:&#34;2015-06-14 19:36:55&#34;,&#34;version&#34;:&#34;2&#34;,&#34;account-id&#34;:&#34;250369693989&#34;,&#34;interface-id&#34;:&#34;eni-f5a92c83&#34;,&#34;srcaddr&#34;:&#34;199.203.59.117&#34;,&#34;dstaddr&#34;:&#34;10.175.10.97&#34;,&#34;srcport&#34;:&#34;26600&#34;,&#34;dstport&#34;:&#34;80&#34;,&#34;protocol&#34;:&#34;6&#34;,&#34;packets&#34;:&#34;1&#34;,&#34;bytes&#34;:&#34;48&#34;,&#34;start&#34;:&#34;1434278215&#34;,&#34;end&#34;:&#34;1434278241&#34;,&#34;action&#34;:&#34;REJECT&#34;,&#34;log-status&#34;:&#34;OK&#34;}
2015-06-14 19:38:36 +0900: &amp;lt; {&#34;_index&#34;:&#34;aws&#34;,&#34;_type&#34;:&#34;vpcflowlog&#34;,&#34;_id&#34;:&#34;AU3xpkoTyQj6bWWoL4TZ&#34;,&#34;_version&#34;:1,&#34;created&#34;:true}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　投入後のデータ一覧は以下の通りです。19:25:47以前のログが重複登録されることなく、19:25:47以降のログが増えました！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://aimless.jp/blog/wp-content/uploads/2015/06/002.png&#34; alt=&#34;投入済みデータ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;　それっぽく動いたスクリプトは以下の通りです。cronで回してみてみようと思います。&lt;/p&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: utf-8

require &#34;json&#34;
require &amp;#039;aws-sdk-core&amp;#039;
require &amp;#039;elasticsearch&amp;#039;
require &amp;#039;fileutils&amp;#039;

region = &amp;#039;ap-northeast-1&amp;#039;
log_group_name = &amp;#039;VPCFLowLog&amp;#039;
log_stream_name = &amp;#039;eni-xxxxxxxx-all&amp;#039;
@state_file = Dir.pwd + &#34;/&#34; + log_group_name + &#34;.&#34; + log_stream_name + &#34;.state&#34;

# トークンをstateファイルに書き込む
def write_token(token)
    File.open(@state_file,&#34;w&#34;) do |file|
        file.puts(token)
    end
end

# トークンをstateファイルから読み込む
def read_token
    if File.exist?(@state_file) then
        return File.read(@state_file).chomp
    else
        return 
    end
end

cloudwatchlogs = Aws::CloudWatchLogs::Client.new(region: region )

# cloudwatchlogs.get_log_eventsのオプションを定義
options = {
    log_group_name: log_group_name,
    log_stream_name: log_stream_name,
}

# もしstateファイルから前回のtokenが取得できたら、そのtokenをオプションに追加
if read_token != nil  then
    options[:next_token] = read_token
end

# ログを取得
resp = cloudwatchlogs.get_log_events(options)

# 取得したログからtokenを保存
write_token(resp.next_forward_token)

hash = {}
message_elements = Array.new()

message_field = [
    &#34;version&#34;,
    &#34;account-id&#34;,
    &#34;interface-id&#34;,
    &#34;srcaddr&#34;,
    &#34;dstaddr&#34;,
    &#34;srcport&#34;,
    &#34;dstport&#34;,
    &#34;protocol&#34;,
    &#34;packets&#34;,
    &#34;bytes&#34;,
    &#34;start&#34;,
    &#34;end&#34;,
    &#34;action&#34;,
    &#34;log-status&#34;]

resp.events.each {|event|

    hash[&#34;@timestamp&#34;] = Time.at(event.timestamp/1000.0).strftime(&amp;#039;%Y-%m-%d %H:%M:%S&amp;#039;)
    message_elements = event.message.split(&#34; &#34;)
    message_elements.each.with_index(0)  {|element,i|
        hash[message_field[i]] = element
    }

    # BytesとPacketsをInteger型にすると、NODATAの時の-が型エラーになるので、捨てる
    if hash[&#34;log-status&#34;] != &#34;NODATA&#34; then
        client = Elasticsearch::Client.new(hosts: &#34;localhost:9200&#34;,log: true)
        client.index(index:&#34;aws&#34;, type:&#34;vpcflowlog&#34;, body:hash.to_json)
    end
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>